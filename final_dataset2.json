[
    {
        "module": "comb_1321",
        "template": "simple_comb",
        "rtl_code": "module comb_1321(in0, in1, out);\n  input in0, in1;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  nor g0(w0, in1, in0);\n  and g1(w1, w0, in0);\n  xor g2(w2, w1, in0);\n  or g3(w3, w2, in1);\n  and g4(w4, w3, in1);\n  assign out = w4;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 2,
            "num_gates": 5,
            "expected_ff": 0,
            "expected_comb_depth": 5
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_1321.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_1321.v\nParsing Verilog input from `verilog_files/comb_1321.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_1321'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_1321\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_1321\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_1321\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_1321...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1321..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1321.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1321..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1321.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_1321:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1321..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1321.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1321..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1321.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $xor.\nNo more expansions possible.\n<suppressed ~79 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_1321' to `<abc-temp-dir>/input.blif'..\nExtracted 6 gates and 8 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:            ANDNOT cells:        1\nABC RESULTS:               NOR cells:        1\nABC RESULTS:        internal signals:        5\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1321.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1321'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1321..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~5 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_1321'. Setting top module to comb_1321.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_1321\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_1321\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_1321 ===\n\n   Number of wires:                  5\n   Number of wire bits:              5\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_ANDNOT_                       1\n     $_NOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_1321...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_1321 ===\n\n   Number of wires:                  5\n   Number of wire bits:              5\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_ANDNOT_                       1\n     $_NOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 243fbf7d56, CPU: user 0.05s system 0.02s, MEM: 14.84 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 55% 1x abc (0 sec), 12% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 5,
            "gate_counts": {
                "total": 2
            },
            "flip_flops": 0,
            "fan_in": 1,
            "fan_out": 2
        }
    },
    {
        "module": "fanin_7913",
        "template": "high_fanin",
        "rtl_code": "module fanin_7913(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_0_4;\n  or g_0_4(w_0_4, in8, in9);\n  wire w_0_5;\n  or g_0_5(w_0_5, in10, in11);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_1_2;\n  or g_1_2(w_1_2, w_0_4, w_0_5);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_2_1;\n  or g_2_1(w_2_1, w_1_2, in12);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, w_2_1);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 13,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_7913.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_7913.v\nParsing Verilog input from `verilog_files/fanin_7913.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_7913'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_7913\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_7913\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_7913\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\nRemoved 0 unused cells and 12 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_7913...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_7913..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_7913.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_7913..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_7913.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_7913:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_7913..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_7913.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_7913..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_7913.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~85 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_7913' to `<abc-temp-dir>/input.blif'..\nExtracted 12 gates and 25 wires to a netlist network with 13 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:       12\nABC RESULTS:        internal signals:       11\nABC RESULTS:           input signals:       13\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_7913.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_7913'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_7913..\nRemoved 0 unused cells and 25 unused wires.\n<suppressed ~12 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_7913'. Setting top module to fanin_7913.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_7913\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_7913\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_7913 ===\n\n   Number of wires:                 26\n   Number of wire bits:             26\n   Number of public wires:          15\n   Number of public wire bits:      15\n   Number of ports:                 14\n   Number of port bits:             14\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 12\n     $_OR_                          12\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_7913...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_7913 ===\n\n   Number of wires:                 26\n   Number of wire bits:             26\n   Number of public wires:          15\n   Number of public wire bits:      15\n   Number of ports:                 14\n   Number of port bits:             14\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 12\n     $_OR_                          12\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: c386019eba, CPU: user 0.05s system 0.00s, MEM: 14.59 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 12
            },
            "flip_flops": 0,
            "fan_in": 1,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_8124",
        "template": "multi_clock",
        "rtl_code": "module multiclk_8124(in0, in1, in2, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2;\n  output out;\n  wire comb1;\n  or g0(comb1, in0, in1);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 3,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_8124.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_8124.v\nParsing Verilog input from `verilog_files/multiclk_8124.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_8124'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_8124\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_8124\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_8124\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_8124.v:13$3 in module multiclk_8124.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_8124.v:8$2 in module multiclk_8124.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_8124.$proc$verilog_files/multiclk_8124.v:13$3'.\nFound async reset \\reset in `\\multiclk_8124.$proc$verilog_files/multiclk_8124.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_8124.$proc$verilog_files/multiclk_8124.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_8124.$proc$verilog_files/multiclk_8124.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_8124.\\cross_domain' using process `\\multiclk_8124.$proc$verilog_files/multiclk_8124.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_8124.\\reg1' using process `\\multiclk_8124.$proc$verilog_files/multiclk_8124.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_8124.$proc$verilog_files/multiclk_8124.v:13$3'.\nRemoving empty process `multiclk_8124.$proc$verilog_files/multiclk_8124.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_8124...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8124..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8124.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8124..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8124.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_8124:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8124..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8124.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8124..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8124.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_8124' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8124.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8124'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8124..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_8124'. Setting top module to multiclk_8124.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_8124\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_8124\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_8124 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_8124...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_8124 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 15b07768c0, CPU: user 0.04s system 0.01s, MEM: 15.27 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 4,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_9996",
        "template": "multi_clock",
        "rtl_code": "module multiclk_9996(in0, in1, in2, in3, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2, in3;\n  output out;\n  wire comb1;\n  or g0(comb1, in1, in1);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 4,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_9996.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_9996.v\nParsing Verilog input from `verilog_files/multiclk_9996.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_9996'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_9996\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9996\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9996\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9996.v:13$3 in module multiclk_9996.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9996.v:8$2 in module multiclk_9996.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_9996.$proc$verilog_files/multiclk_9996.v:13$3'.\nFound async reset \\reset in `\\multiclk_9996.$proc$verilog_files/multiclk_9996.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_9996.$proc$verilog_files/multiclk_9996.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_9996.$proc$verilog_files/multiclk_9996.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_9996.\\cross_domain' using process `\\multiclk_9996.$proc$verilog_files/multiclk_9996.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_9996.\\reg1' using process `\\multiclk_9996.$proc$verilog_files/multiclk_9996.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_9996.$proc$verilog_files/multiclk_9996.v:13$3'.\nRemoving empty process `multiclk_9996.$proc$verilog_files/multiclk_9996.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n<suppressed ~3 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9996...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9996..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9996.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9996..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9996.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_9996:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9996..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9996.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9996..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9996.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~75 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_9996' to `<abc-temp-dir>/input.blif'..\nExtracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.\nDon't call ABC as there is nothing to map.\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9996.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9996'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9996..\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_9996'. Setting top module to multiclk_9996.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9996\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9996\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_9996 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_DFF_PP0_                      2\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9996...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_9996 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_DFF_PP0_                      2\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 7ab6d42036, CPU: user 0.04s system 0.00s, MEM: 14.19 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 28% 13x opt_expr (0 sec), 23% 3x read_verilog (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 2
            },
            "flip_flops": 2,
            "fan_in": 3,
            "fan_out": 1
        }
    },
    {
        "module": "comb_8804",
        "template": "simple_comb",
        "rtl_code": "module comb_8804(in0, in1, in2, in3, out);\n  input in0, in1, in2, in3;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  nand g0(w0, in3, in1);\n  xor g1(w1, w0, in3);\n  nor g2(w2, w1, in2);\n  assign out = w2;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 4,
            "num_gates": 3,
            "expected_ff": 0,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_8804.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_8804.v\nParsing Verilog input from `verilog_files/comb_8804.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_8804'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_8804\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_8804\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_8804\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_8804...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8804..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8804.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8804..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8804.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_8804:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8804..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8804.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8804..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8804.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~78 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_8804' to `<abc-temp-dir>/input.blif'..\nExtracted 5 gates and 8 wires to a netlist network with 3 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:            ANDNOT cells:        2\nABC RESULTS:        internal signals:        4\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8804.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8804'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8804..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~3 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_8804'. Setting top module to comb_8804.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_8804\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_8804\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_8804 ===\n\n   Number of wires:                  7\n   Number of wire bits:              7\n   Number of public wires:           6\n   Number of public wire bits:       6\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_ANDNOT_                       2\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_8804...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_8804 ===\n\n   Number of wires:                  7\n   Number of wire bits:              7\n   Number of public wires:           6\n   Number of public wire bits:       6\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_ANDNOT_                       2\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 71b41eec58, CPU: user 0.05s system 0.01s, MEM: 14.73 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 14% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 2
            },
            "flip_flops": 0,
            "fan_in": 1,
            "fan_out": 1
        }
    },
    {
        "module": "comb_1987",
        "template": "simple_comb",
        "rtl_code": "module comb_1987(in0, in1, out);\n  input in0, in1;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  wire w5;\n  and g0(w0, in0, in1);\n  nand g1(w1, w0, in0);\n  nand g2(w2, w1, in1);\n  or g3(w3, w2, in1);\n  xor g4(w4, w3, in1);\n  xor g5(w5, w4, in1);\n  assign out = w5;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 2,
            "num_gates": 6,
            "expected_ff": 0,
            "expected_comb_depth": 6
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_1987.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_1987.v\nParsing Verilog input from `verilog_files/comb_1987.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_1987'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_1987\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_1987\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_1987\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\nRemoved 0 unused cells and 6 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_1987...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1987..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1987.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1987..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1987.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_1987:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1987..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1987.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1987..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1987.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $xor.\nNo more expansions possible.\n<suppressed ~81 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_1987' to `<abc-temp-dir>/input.blif'..\nExtracted 8 gates and 10 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        1\nABC RESULTS:             ORNOT cells:        1\nABC RESULTS:        internal signals:        7\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1987.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1987'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1987..\nRemoved 0 unused cells and 10 unused wires.\n<suppressed ~6 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_1987'. Setting top module to comb_1987.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_1987\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_1987\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_1987 ===\n\n   Number of wires:                  5\n   Number of wire bits:              5\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_ORNOT_                        1\n     $_OR_                           1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_1987...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_1987 ===\n\n   Number of wires:                  5\n   Number of wire bits:              5\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  2\n     $_ORNOT_                        1\n     $_OR_                           1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: f22631d0ec, CPU: user 0.05s system 0.01s, MEM: 15.11 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 6,
            "gate_counts": {
                "total": 2
            },
            "flip_flops": 0,
            "fan_in": 4,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_7058",
        "template": "multi_clock",
        "rtl_code": "module multiclk_7058(in0, in1, in2, in3, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2, in3;\n  output out;\n  wire comb1;\n  xor g0(comb1, in1, in3);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 4,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_7058.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_7058.v\nParsing Verilog input from `verilog_files/multiclk_7058.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_7058'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_7058\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_7058\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_7058\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_7058.v:13$3 in module multiclk_7058.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_7058.v:8$2 in module multiclk_7058.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_7058.$proc$verilog_files/multiclk_7058.v:13$3'.\nFound async reset \\reset in `\\multiclk_7058.$proc$verilog_files/multiclk_7058.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_7058.$proc$verilog_files/multiclk_7058.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_7058.$proc$verilog_files/multiclk_7058.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_7058.\\cross_domain' using process `\\multiclk_7058.$proc$verilog_files/multiclk_7058.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_7058.\\reg1' using process `\\multiclk_7058.$proc$verilog_files/multiclk_7058.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_7058.$proc$verilog_files/multiclk_7058.v:13$3'.\nRemoving empty process `multiclk_7058.$proc$verilog_files/multiclk_7058.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_7058...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_7058..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_7058.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_7058..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_7058.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_7058:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_7058..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_7058.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_7058..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_7058.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_7058' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_7058.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_7058'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_7058..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_7058'. Setting top module to multiclk_7058.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_7058\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_7058\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_7058 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_7058...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_7058 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: f74848b937, CPU: user 0.04s system 0.00s, MEM: 14.08 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 54% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 3,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_3874",
        "template": "multi_clock",
        "rtl_code": "module multiclk_3874(in0, in1, in2, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2;\n  output out;\n  wire comb1;\n  xor g0(comb1, in1, in0);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 3,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_3874.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_3874.v\nParsing Verilog input from `verilog_files/multiclk_3874.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_3874'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_3874\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_3874\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_3874\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_3874.v:13$3 in module multiclk_3874.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_3874.v:8$2 in module multiclk_3874.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_3874.$proc$verilog_files/multiclk_3874.v:13$3'.\nFound async reset \\reset in `\\multiclk_3874.$proc$verilog_files/multiclk_3874.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_3874.$proc$verilog_files/multiclk_3874.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_3874.$proc$verilog_files/multiclk_3874.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_3874.\\cross_domain' using process `\\multiclk_3874.$proc$verilog_files/multiclk_3874.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_3874.\\reg1' using process `\\multiclk_3874.$proc$verilog_files/multiclk_3874.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_3874.$proc$verilog_files/multiclk_3874.v:13$3'.\nRemoving empty process `multiclk_3874.$proc$verilog_files/multiclk_3874.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_3874...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3874..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3874.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3874..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3874.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_3874:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3874..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3874.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3874..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3874.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_3874' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3874.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3874'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3874..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_3874'. Setting top module to multiclk_3874.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_3874\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_3874\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_3874 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_3874...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_3874 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 3eef2a4843, CPU: user 0.05s system 0.01s, MEM: 15.17 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 4,
            "fan_out": 3
        }
    },
    {
        "module": "pipe_5204",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_5204(in0, in1, in2, clk, reset, out);\n  input clk, reset;\n  input in0, in1, in2;\n  output out;\n  wire stage0;\n  and g0(stage0, in0, in0);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  nand g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  or g2(stage2, stage2_ff, in1);\n  reg stage3_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage3_ff <= 0;\n    else stage3_ff <= stage2_ff;\n  end\n  wire stage3;\n  nor g3(stage3, stage3_ff, in1);\n  reg stage4_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage4_ff <= 0;\n    else stage4_ff <= stage3_ff;\n  end\n  wire stage4;\n  nand g4(stage4, stage4_ff, in2);\n  reg stage5_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage5_ff <= 0;\n    else stage5_ff <= stage4_ff;\n  end\n  wire stage5;\n  nor g5(stage5, stage5_ff, in1);\n  assign out = stage5;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 3,
            "num_pipeline_stages": 6,
            "expected_ff": 6,
            "expected_comb_depth": 6
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_5204.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_5204.v\nParsing Verilog input from `verilog_files/pipe_5204.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_5204'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_5204\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_5204\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_5204\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_5204.v:36$13 in module pipe_5204.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_5204.v:29$10 in module pipe_5204.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_5204.v:22$7 in module pipe_5204.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_5204.v:15$5 in module pipe_5204.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_5204.v:8$2 in module pipe_5204.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 5 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_5204.$proc$verilog_files/pipe_5204.v:36$13'.\nFound async reset \\reset in `\\pipe_5204.$proc$verilog_files/pipe_5204.v:29$10'.\nFound async reset \\reset in `\\pipe_5204.$proc$verilog_files/pipe_5204.v:22$7'.\nFound async reset \\reset in `\\pipe_5204.$proc$verilog_files/pipe_5204.v:15$5'.\nFound async reset \\reset in `\\pipe_5204.$proc$verilog_files/pipe_5204.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:36$13'.\n     1/1: $0\\stage5_ff[0:0]\nCreating decoders for process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:29$10'.\n     1/1: $0\\stage4_ff[0:0]\nCreating decoders for process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:22$7'.\n     1/1: $0\\stage3_ff[0:0]\nCreating decoders for process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:15$5'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_5204.\\stage5_ff' using process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:36$13'.\n  created $adff cell `$procdff$18' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_5204.\\stage4_ff' using process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:29$10'.\n  created $adff cell `$procdff$21' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_5204.\\stage3_ff' using process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:22$7'.\n  created $adff cell `$procdff$24' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_5204.\\stage2_ff' using process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:15$5'.\n  created $adff cell `$procdff$27' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_5204.\\stage1_ff' using process `\\pipe_5204.$proc$verilog_files/pipe_5204.v:8$2'.\n  created $adff cell `$procdff$30' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_5204.$proc$verilog_files/pipe_5204.v:36$13'.\nRemoving empty process `pipe_5204.$proc$verilog_files/pipe_5204.v:29$10'.\nRemoving empty process `pipe_5204.$proc$verilog_files/pipe_5204.v:22$7'.\nRemoving empty process `pipe_5204.$proc$verilog_files/pipe_5204.v:15$5'.\nRemoving empty process `pipe_5204.$proc$verilog_files/pipe_5204.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n<suppressed ~6 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\nRemoved 7 unused cells and 23 unused wires.\n<suppressed ~12 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_5204...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5204..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5204.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5204..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5204.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_5204:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5204..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5204.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5204..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5204.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~80 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_5204' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               NOR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5204.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5204'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5204..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_5204'. Setting top module to pipe_5204.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_5204\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_5204\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_5204 ===\n\n   Number of wires:                 13\n   Number of wire bits:             13\n   Number of public wires:          13\n   Number of public wire bits:      13\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  6\n     $_DFF_PP0_                      5\n     $_NOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_5204...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_5204 ===\n\n   Number of wires:                 13\n   Number of wire bits:             13\n   Number of public wires:          13\n   Number of public wire bits:      13\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  6\n     $_DFF_PP0_                      5\n     $_NOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: c0da084503, CPU: user 0.05s system 0.01s, MEM: 16.03 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 50% 1x abc (0 sec), 14% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 6,
            "gate_counts": {
                "total": 6
            },
            "flip_flops": 6,
            "fan_in": 1,
            "fan_out": 3
        }
    },
    {
        "module": "fanin_5443",
        "template": "high_fanin",
        "rtl_code": "module fanin_5443(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_0_4;\n  or g_0_4(w_0_4, in8, in9);\n  wire w_0_5;\n  or g_0_5(w_0_5, in10, in11);\n  wire w_0_6;\n  or g_0_6(w_0_6, in12, in13);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_1_2;\n  or g_1_2(w_1_2, w_0_4, w_0_5);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_2_1;\n  or g_2_1(w_2_1, w_1_2, w_0_6);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, w_2_1);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 14,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_5443.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_5443.v\nParsing Verilog input from `verilog_files/fanin_5443.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_5443'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_5443\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_5443\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_5443\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\nRemoved 0 unused cells and 13 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_5443...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_5443..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_5443.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_5443..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_5443.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_5443:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_5443..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_5443.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_5443..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_5443.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~86 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_5443' to `<abc-temp-dir>/input.blif'..\nExtracted 13 gates and 27 wires to a netlist network with 14 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:       13\nABC RESULTS:        internal signals:       12\nABC RESULTS:           input signals:       14\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_5443.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_5443'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_5443..\nRemoved 0 unused cells and 27 unused wires.\n<suppressed ~13 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_5443'. Setting top module to fanin_5443.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_5443\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_5443\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_5443 ===\n\n   Number of wires:                 28\n   Number of wire bits:             28\n   Number of public wires:          16\n   Number of public wire bits:      16\n   Number of ports:                 15\n   Number of port bits:             15\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 13\n     $_OR_                          13\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_5443...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_5443 ===\n\n   Number of wires:                 28\n   Number of wire bits:             28\n   Number of public wires:          16\n   Number of public wire bits:      16\n   Number of ports:                 15\n   Number of port bits:             15\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 13\n     $_OR_                          13\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 423d51e203, CPU: user 0.05s system 0.00s, MEM: 14.42 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 51% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 13
            },
            "flip_flops": 0,
            "fan_in": 3,
            "fan_out": 3
        }
    },
    {
        "module": "comb_1015",
        "template": "simple_comb",
        "rtl_code": "module comb_1015(in0, in1, in2, out);\n  input in0, in1, in2;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  wire w5;\n  wire w6;\n  wire w7;\n  nor g0(w0, in2, in2);\n  and g1(w1, w0, in0);\n  xor g2(w2, w1, in2);\n  and g3(w3, w2, in2);\n  nand g4(w4, w3, in1);\n  or g5(w5, w4, in1);\n  nor g6(w6, w5, in2);\n  nor g7(w7, w6, in1);\n  assign out = w7;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 3,
            "num_gates": 8,
            "expected_ff": 0,
            "expected_comb_depth": 8
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_1015.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_1015.v\nParsing Verilog input from `verilog_files/comb_1015.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_1015'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_1015\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_1015\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_1015\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n<suppressed ~1 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\nRemoved 0 unused cells and 9 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_1015...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1015..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1015.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1015..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1015.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_1015:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1015..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1015.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_1015..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_1015.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~84 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_1015' to `<abc-temp-dir>/input.blif'..\nExtracted 11 gates and 14 wires to a netlist network with 3 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:            ANDNOT cells:        3\nABC RESULTS:               NOT cells:        2\nABC RESULTS:                OR cells:        3\nABC RESULTS:        internal signals:       10\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_1015.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_1015'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_1015..\nRemoved 0 unused cells and 14 unused wires.\n<suppressed ~8 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_1015'. Setting top module to comb_1015.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_1015\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_1015\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_1015 ===\n\n   Number of wires:                 12\n   Number of wire bits:             12\n   Number of public wires:           5\n   Number of public wire bits:       5\n   Number of ports:                  4\n   Number of port bits:              4\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_ANDNOT_                       3\n     $_NOT_                          2\n     $_OR_                           3\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_1015...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_1015 ===\n\n   Number of wires:                 12\n   Number of wire bits:             12\n   Number of public wires:           5\n   Number of public wire bits:       5\n   Number of ports:                  4\n   Number of port bits:              4\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_ANDNOT_                       3\n     $_NOT_                          2\n     $_OR_                           3\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 9e740fa704, CPU: user 0.05s system 0.01s, MEM: 14.67 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 51% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 8,
            "gate_counts": {
                "total": 8
            },
            "flip_flops": 0,
            "fan_in": 2,
            "fan_out": 3
        }
    },
    {
        "module": "comb_6199",
        "template": "simple_comb",
        "rtl_code": "module comb_6199(in0, in1, in2, in3, in4, out);\n  input in0, in1, in2, in3, in4;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  wire w5;\n  wire w6;\n  wire w7;\n  and g0(w0, in3, in1);\n  nor g1(w1, w0, in2);\n  and g2(w2, w1, in1);\n  and g3(w3, w2, in2);\n  and g4(w4, w3, in3);\n  xor g5(w5, w4, in2);\n  and g6(w6, w5, in1);\n  nor g7(w7, w6, in3);\n  assign out = w7;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 5,
            "num_gates": 8,
            "expected_ff": 0,
            "expected_comb_depth": 8
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_6199.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_6199.v\nParsing Verilog input from `verilog_files/comb_6199.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_6199'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_6199\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_6199\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_6199\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_6199...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_6199..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_6199.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_6199..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_6199.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_6199:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_6199..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_6199.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_6199..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_6199.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $xor.\nNo more expansions possible.\n<suppressed ~83 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_6199' to `<abc-temp-dir>/input.blif'..\nExtracted 10 gates and 13 wires to a netlist network with 3 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               AND cells:        1\nABC RESULTS:            ANDNOT cells:        3\nABC RESULTS:              NAND cells:        1\nABC RESULTS:               NOT cells:        1\nABC RESULTS:                OR cells:        1\nABC RESULTS:             ORNOT cells:        1\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        9\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_6199.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_6199'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_6199..\nRemoved 0 unused cells and 13 unused wires.\n<suppressed ~8 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_6199'. Setting top module to comb_6199.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_6199\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_6199\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_6199 ===\n\n   Number of wires:                 15\n   Number of wire bits:             15\n   Number of public wires:           7\n   Number of public wire bits:       7\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  9\n     $_ANDNOT_                       3\n     $_AND_                          1\n     $_NAND_                         1\n     $_NOT_                          1\n     $_ORNOT_                        1\n     $_OR_                           1\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_6199...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_6199 ===\n\n   Number of wires:                 15\n   Number of wire bits:             15\n   Number of public wires:           7\n   Number of public wire bits:       7\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  9\n     $_ANDNOT_                       3\n     $_AND_                          1\n     $_NAND_                         1\n     $_NOT_                          1\n     $_ORNOT_                        1\n     $_OR_                           1\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 1db9e7f5db, CPU: user 0.05s system 0.01s, MEM: 14.47 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 8,
            "gate_counts": {
                "total": 9
            },
            "flip_flops": 0,
            "fan_in": 1,
            "fan_out": 4
        }
    },
    {
        "module": "pipe_1051",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_1051(in0, in1, clk, reset, out);\n  input clk, reset;\n  input in0, in1;\n  output out;\n  wire stage0;\n  or g0(stage0, in1, in0);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  nand g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  xor g2(stage2, stage2_ff, in1);\n  reg stage3_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage3_ff <= 0;\n    else stage3_ff <= stage2_ff;\n  end\n  wire stage3;\n  nand g3(stage3, stage3_ff, in1);\n  reg stage4_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage4_ff <= 0;\n    else stage4_ff <= stage3_ff;\n  end\n  wire stage4;\n  and g4(stage4, stage4_ff, in0);\n  reg stage5_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage5_ff <= 0;\n    else stage5_ff <= stage4_ff;\n  end\n  wire stage5;\n  nand g5(stage5, stage5_ff, in1);\n  reg stage6_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage6_ff <= 0;\n    else stage6_ff <= stage5_ff;\n  end\n  wire stage6;\n  nor g6(stage6, stage6_ff, in0);\n  assign out = stage6;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 2,
            "num_pipeline_stages": 7,
            "expected_ff": 7,
            "expected_comb_depth": 7
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_1051.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_1051.v\nParsing Verilog input from `verilog_files/pipe_1051.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_1051'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_1051\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_1051\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_1051\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_1051.v:43$15 in module pipe_1051.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_1051.v:36$12 in module pipe_1051.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_1051.v:29$10 in module pipe_1051.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_1051.v:22$7 in module pipe_1051.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_1051.v:15$5 in module pipe_1051.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_1051.v:8$2 in module pipe_1051.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 6 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_1051.$proc$verilog_files/pipe_1051.v:43$15'.\nFound async reset \\reset in `\\pipe_1051.$proc$verilog_files/pipe_1051.v:36$12'.\nFound async reset \\reset in `\\pipe_1051.$proc$verilog_files/pipe_1051.v:29$10'.\nFound async reset \\reset in `\\pipe_1051.$proc$verilog_files/pipe_1051.v:22$7'.\nFound async reset \\reset in `\\pipe_1051.$proc$verilog_files/pipe_1051.v:15$5'.\nFound async reset \\reset in `\\pipe_1051.$proc$verilog_files/pipe_1051.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:43$15'.\n     1/1: $0\\stage6_ff[0:0]\nCreating decoders for process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:36$12'.\n     1/1: $0\\stage5_ff[0:0]\nCreating decoders for process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:29$10'.\n     1/1: $0\\stage4_ff[0:0]\nCreating decoders for process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:22$7'.\n     1/1: $0\\stage3_ff[0:0]\nCreating decoders for process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:15$5'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_1051.\\stage6_ff' using process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:43$15'.\n  created $adff cell `$procdff$20' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_1051.\\stage5_ff' using process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:36$12'.\n  created $adff cell `$procdff$23' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_1051.\\stage4_ff' using process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:29$10'.\n  created $adff cell `$procdff$26' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_1051.\\stage3_ff' using process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:22$7'.\n  created $adff cell `$procdff$29' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_1051.\\stage2_ff' using process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:15$5'.\n  created $adff cell `$procdff$32' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_1051.\\stage1_ff' using process `\\pipe_1051.$proc$verilog_files/pipe_1051.v:8$2'.\n  created $adff cell `$procdff$35' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_1051.$proc$verilog_files/pipe_1051.v:43$15'.\nRemoving empty process `pipe_1051.$proc$verilog_files/pipe_1051.v:36$12'.\nRemoving empty process `pipe_1051.$proc$verilog_files/pipe_1051.v:29$10'.\nRemoving empty process `pipe_1051.$proc$verilog_files/pipe_1051.v:22$7'.\nRemoving empty process `pipe_1051.$proc$verilog_files/pipe_1051.v:15$5'.\nRemoving empty process `pipe_1051.$proc$verilog_files/pipe_1051.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n<suppressed ~6 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\nRemoved 8 unused cells and 27 unused wires.\n<suppressed ~14 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_1051...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_1051..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_1051.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_1051..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_1051.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_1051:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_1051..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_1051.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_1051..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_1051.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~82 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_1051' to `<abc-temp-dir>/input.blif'..\nExtracted 3 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               NOR cells:        1\nABC RESULTS:                OR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        2\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_1051.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_1051'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_1051..\nRemoved 0 unused cells and 6 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_1051'. Setting top module to pipe_1051.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_1051\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_1051\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_1051 ===\n\n   Number of wires:                 13\n   Number of wire bits:             13\n   Number of public wires:          13\n   Number of public wire bits:      13\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_DFF_PP0_                      6\n     $_NOR_                          1\n     $_OR_                           1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_1051...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_1051 ===\n\n   Number of wires:                 13\n   Number of wire bits:             13\n   Number of public wires:          13\n   Number of public wire bits:      13\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_DFF_PP0_                      6\n     $_NOR_                          1\n     $_OR_                           1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 2f5ecc81e7, CPU: user 0.05s system 0.01s, MEM: 14.95 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 7,
            "gate_counts": {
                "total": 8
            },
            "flip_flops": 7,
            "fan_in": 1,
            "fan_out": 4
        }
    },
    {
        "module": "fanin_4101",
        "template": "high_fanin",
        "rtl_code": "module fanin_4101(in0, in1, in2, in3, in4, in5, in6, in7, in8, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, in8);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 9,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_4101.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_4101.v\nParsing Verilog input from `verilog_files/fanin_4101.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_4101'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_4101\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_4101\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_4101\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4101...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4101..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4101.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4101..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4101.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_4101:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4101..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4101.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4101..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4101.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~81 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_4101' to `<abc-temp-dir>/input.blif'..\nExtracted 8 gates and 17 wires to a netlist network with 9 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        8\nABC RESULTS:        internal signals:        7\nABC RESULTS:           input signals:        9\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4101.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4101'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4101..\nRemoved 0 unused cells and 17 unused wires.\n<suppressed ~8 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_4101'. Setting top module to fanin_4101.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_4101\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_4101\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_4101 ===\n\n   Number of wires:                 18\n   Number of wire bits:             18\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                 10\n   Number of port bits:             10\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_OR_                           8\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4101...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_4101 ===\n\n   Number of wires:                 18\n   Number of wire bits:             18\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                 10\n   Number of port bits:             10\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_OR_                           8\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: b33f37494f, CPU: user 0.05s system 0.01s, MEM: 15.61 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 12% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 8
            },
            "flip_flops": 0,
            "fan_in": 1,
            "fan_out": 1
        }
    },
    {
        "module": "multiclk_3336",
        "template": "multi_clock",
        "rtl_code": "module multiclk_3336(in0, in1, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1;\n  output out;\n  wire comb1;\n  nand g0(comb1, in1, in0);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 2,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_3336.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_3336.v\nParsing Verilog input from `verilog_files/multiclk_3336.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_3336'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_3336\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_3336\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_3336\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_3336.v:13$4 in module multiclk_3336.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_3336.v:8$3 in module multiclk_3336.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_3336.$proc$verilog_files/multiclk_3336.v:13$4'.\nFound async reset \\reset in `\\multiclk_3336.$proc$verilog_files/multiclk_3336.v:8$3'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_3336.$proc$verilog_files/multiclk_3336.v:13$4'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_3336.$proc$verilog_files/multiclk_3336.v:8$3'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_3336.\\cross_domain' using process `\\multiclk_3336.$proc$verilog_files/multiclk_3336.v:13$4'.\n  created $adff cell `$procdff$7' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_3336.\\reg1' using process `\\multiclk_3336.$proc$verilog_files/multiclk_3336.v:8$3'.\n  created $adff cell `$procdff$10' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_3336.$proc$verilog_files/multiclk_3336.v:13$4'.\nRemoving empty process `multiclk_3336.$proc$verilog_files/multiclk_3336.v:8$3'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_3336...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3336.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3336.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_3336:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3336.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3336.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_3336' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:              NAND cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3336.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3336'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3336..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_3336'. Setting top module to multiclk_3336.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_3336\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_3336\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_3336 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NAND_                         1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_3336...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_3336 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NAND_                         1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: f9dfd4a900, CPU: user 0.05s system 0.01s, MEM: 15.48 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 4,
            "fan_out": 1
        }
    },
    {
        "module": "multiclk_5110",
        "template": "multi_clock",
        "rtl_code": "module multiclk_5110(in0, in1, in2, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2;\n  output out;\n  wire comb1;\n  nor g0(comb1, in0, in2);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 3,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_5110.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_5110.v\nParsing Verilog input from `verilog_files/multiclk_5110.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_5110'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_5110\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_5110\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_5110\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_5110.v:13$4 in module multiclk_5110.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_5110.v:8$3 in module multiclk_5110.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_5110.$proc$verilog_files/multiclk_5110.v:13$4'.\nFound async reset \\reset in `\\multiclk_5110.$proc$verilog_files/multiclk_5110.v:8$3'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_5110.$proc$verilog_files/multiclk_5110.v:13$4'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_5110.$proc$verilog_files/multiclk_5110.v:8$3'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_5110.\\cross_domain' using process `\\multiclk_5110.$proc$verilog_files/multiclk_5110.v:13$4'.\n  created $adff cell `$procdff$7' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_5110.\\reg1' using process `\\multiclk_5110.$proc$verilog_files/multiclk_5110.v:8$3'.\n  created $adff cell `$procdff$10' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_5110.$proc$verilog_files/multiclk_5110.v:13$4'.\nRemoving empty process `multiclk_5110.$proc$verilog_files/multiclk_5110.v:8$3'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_5110...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_5110..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_5110.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_5110..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_5110.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_5110:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_5110..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_5110.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_5110..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_5110.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_5110' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               NOR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_5110.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_5110'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_5110..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_5110'. Setting top module to multiclk_5110.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_5110\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_5110\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_5110 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_5110...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_5110 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: d5b84f7ed3, CPU: user 0.04s system 0.01s, MEM: 14.61 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 3,
            "fan_out": 1
        }
    },
    {
        "module": "pipe_7979",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_7979(in0, in1, clk, reset, out);\n  input clk, reset;\n  input in0, in1;\n  output out;\n  wire stage0;\n  xor g0(stage0, in1, in1);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  xor g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  or g2(stage2, stage2_ff, in0);\n  reg stage3_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage3_ff <= 0;\n    else stage3_ff <= stage2_ff;\n  end\n  wire stage3;\n  nand g3(stage3, stage3_ff, in0);\n  reg stage4_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage4_ff <= 0;\n    else stage4_ff <= stage3_ff;\n  end\n  wire stage4;\n  xor g4(stage4, stage4_ff, in1);\n  assign out = stage4;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 2,
            "num_pipeline_stages": 5,
            "expected_ff": 5,
            "expected_comb_depth": 5
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_7979.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_7979.v\nParsing Verilog input from `verilog_files/pipe_7979.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_7979'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_7979\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_7979\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_7979\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_7979.v:29$9 in module pipe_7979.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_7979.v:22$6 in module pipe_7979.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_7979.v:15$4 in module pipe_7979.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_7979.v:8$2 in module pipe_7979.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 4 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_7979.$proc$verilog_files/pipe_7979.v:29$9'.\nFound async reset \\reset in `\\pipe_7979.$proc$verilog_files/pipe_7979.v:22$6'.\nFound async reset \\reset in `\\pipe_7979.$proc$verilog_files/pipe_7979.v:15$4'.\nFound async reset \\reset in `\\pipe_7979.$proc$verilog_files/pipe_7979.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:29$9'.\n     1/1: $0\\stage4_ff[0:0]\nCreating decoders for process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:22$6'.\n     1/1: $0\\stage3_ff[0:0]\nCreating decoders for process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:15$4'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_7979.\\stage4_ff' using process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:29$9'.\n  created $adff cell `$procdff$13' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_7979.\\stage3_ff' using process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:22$6'.\n  created $adff cell `$procdff$16' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_7979.\\stage2_ff' using process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:15$4'.\n  created $adff cell `$procdff$19' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_7979.\\stage1_ff' using process `\\pipe_7979.$proc$verilog_files/pipe_7979.v:8$2'.\n  created $adff cell `$procdff$22' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_7979.$proc$verilog_files/pipe_7979.v:29$9'.\nRemoving empty process `pipe_7979.$proc$verilog_files/pipe_7979.v:22$6'.\nRemoving empty process `pipe_7979.$proc$verilog_files/pipe_7979.v:15$4'.\nRemoving empty process `pipe_7979.$proc$verilog_files/pipe_7979.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n<suppressed ~4 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n<suppressed ~1 debug messages>\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\nRemoved 4 unused cells and 17 unused wires.\n<suppressed ~8 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_7979...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$22 ($adff) from module pipe_7979.\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.6.9. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.6.12. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.6.13. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$19 ($adff) from module pipe_7979.\n\n2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.6.15. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.6.16. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.6.19. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.6.20. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$16 ($adff) from module pipe_7979.\n\n2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.6.22. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.6.23. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.6.26. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.6.27. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$13 ($adff) from module pipe_7979.\n\n2.6.28. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.6.29. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n<suppressed ~1 debug messages>\n\n2.6.30. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.6.33. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.6.34. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.35. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.6.36. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.6.37. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_7979:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_7979..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_7979.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nNo more expansions possible.\n<suppressed ~73 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_7979' to `<abc-temp-dir>/input.blif'..\nExtracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.\nDon't call ABC as there is nothing to map.\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_7979.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_7979'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_7979..\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_7979'. Setting top module to pipe_7979.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_7979\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_7979\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_7979 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  0\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_7979...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_7979 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  0\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: d943caa7ab, CPU: user 0.05s system 0.01s, MEM: 15.73 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 31% 17x opt_expr (0 sec), 19% 17x opt_clean (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 5,
            "gate_counts": {
                "total": 0
            },
            "flip_flops": 5,
            "fan_in": 2,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_1336",
        "template": "multi_clock",
        "rtl_code": "module multiclk_1336(in0, in1, in2, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2;\n  output out;\n  wire comb1;\n  nand g0(comb1, in1, in2);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 3,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_1336.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_1336.v\nParsing Verilog input from `verilog_files/multiclk_1336.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_1336'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_1336\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1336\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1336\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1336.v:13$4 in module multiclk_1336.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1336.v:8$3 in module multiclk_1336.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_1336.$proc$verilog_files/multiclk_1336.v:13$4'.\nFound async reset \\reset in `\\multiclk_1336.$proc$verilog_files/multiclk_1336.v:8$3'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_1336.$proc$verilog_files/multiclk_1336.v:13$4'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_1336.$proc$verilog_files/multiclk_1336.v:8$3'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_1336.\\cross_domain' using process `\\multiclk_1336.$proc$verilog_files/multiclk_1336.v:13$4'.\n  created $adff cell `$procdff$7' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_1336.\\reg1' using process `\\multiclk_1336.$proc$verilog_files/multiclk_1336.v:8$3'.\n  created $adff cell `$procdff$10' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_1336.$proc$verilog_files/multiclk_1336.v:13$4'.\nRemoving empty process `multiclk_1336.$proc$verilog_files/multiclk_1336.v:8$3'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1336...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1336.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1336.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_1336:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1336.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1336..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1336.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_1336' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:              NAND cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1336.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1336'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1336..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_1336'. Setting top module to multiclk_1336.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1336\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1336\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_1336 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NAND_                         1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1336...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_1336 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NAND_                         1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 11d5d5e6d4, CPU: user 0.05s system 0.01s, MEM: 15.53 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 1,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_4901",
        "template": "multi_clock",
        "rtl_code": "module multiclk_4901(in0, in1, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1;\n  output out;\n  wire comb1;\n  nor g0(comb1, in1, in0);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 2,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_4901.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_4901.v\nParsing Verilog input from `verilog_files/multiclk_4901.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_4901'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_4901\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_4901\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_4901\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_4901.v:13$4 in module multiclk_4901.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_4901.v:8$3 in module multiclk_4901.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_4901.$proc$verilog_files/multiclk_4901.v:13$4'.\nFound async reset \\reset in `\\multiclk_4901.$proc$verilog_files/multiclk_4901.v:8$3'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_4901.$proc$verilog_files/multiclk_4901.v:13$4'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_4901.$proc$verilog_files/multiclk_4901.v:8$3'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_4901.\\cross_domain' using process `\\multiclk_4901.$proc$verilog_files/multiclk_4901.v:13$4'.\n  created $adff cell `$procdff$7' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_4901.\\reg1' using process `\\multiclk_4901.$proc$verilog_files/multiclk_4901.v:8$3'.\n  created $adff cell `$procdff$10' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_4901.$proc$verilog_files/multiclk_4901.v:13$4'.\nRemoving empty process `multiclk_4901.$proc$verilog_files/multiclk_4901.v:8$3'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_4901...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_4901..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_4901.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_4901..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_4901.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_4901:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_4901..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_4901.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_4901..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_4901.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_4901' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               NOR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_4901.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_4901'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_4901..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_4901'. Setting top module to multiclk_4901.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_4901\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_4901\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_4901 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_4901...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_4901 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 6aaf6a961a, CPU: user 0.04s system 0.00s, MEM: 14.41 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 4,
            "fan_out": 2
        }
    },
    {
        "module": "fanin_4146",
        "template": "high_fanin",
        "rtl_code": "module fanin_4146(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_0_4;\n  or g_0_4(w_0_4, in8, in9);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, w_0_4);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 10,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_4146.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_4146.v\nParsing Verilog input from `verilog_files/fanin_4146.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_4146'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_4146\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_4146\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_4146\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\nRemoved 0 unused cells and 9 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4146...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4146..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4146.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4146..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4146.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_4146:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4146..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4146.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4146..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4146.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~82 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_4146' to `<abc-temp-dir>/input.blif'..\nExtracted 9 gates and 19 wires to a netlist network with 10 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        9\nABC RESULTS:        internal signals:        8\nABC RESULTS:           input signals:       10\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4146.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4146'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4146..\nRemoved 0 unused cells and 19 unused wires.\n<suppressed ~9 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_4146'. Setting top module to fanin_4146.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_4146\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_4146\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_4146 ===\n\n   Number of wires:                 20\n   Number of wire bits:             20\n   Number of public wires:          12\n   Number of public wire bits:      12\n   Number of ports:                 11\n   Number of port bits:             11\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  9\n     $_OR_                           9\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4146...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_4146 ===\n\n   Number of wires:                 20\n   Number of wire bits:             20\n   Number of public wires:          12\n   Number of public wire bits:      12\n   Number of ports:                 11\n   Number of port bits:             11\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  9\n     $_OR_                           9\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 3981b17362, CPU: user 0.05s system 0.01s, MEM: 14.88 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 9
            },
            "flip_flops": 0,
            "fan_in": 3,
            "fan_out": 3
        }
    },
    {
        "module": "comb_5806",
        "template": "simple_comb",
        "rtl_code": "module comb_5806(in0, in1, in2, in3, in4, out);\n  input in0, in1, in2, in3, in4;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  nor g0(w0, in0, in1);\n  and g1(w1, w0, in1);\n  or g2(w2, w1, in0);\n  xor g3(w3, w2, in2);\n  nor g4(w4, w3, in0);\n  assign out = w4;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 5,
            "num_gates": 5,
            "expected_ff": 0,
            "expected_comb_depth": 5
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_5806.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_5806.v\nParsing Verilog input from `verilog_files/comb_5806.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_5806'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_5806\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_5806\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_5806\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_5806...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_5806..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_5806.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_5806..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_5806.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_5806:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_5806..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_5806.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_5806..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_5806.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $xor.\nNo more expansions possible.\n<suppressed ~80 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_5806' to `<abc-temp-dir>/input.blif'..\nExtracted 7 gates and 10 wires to a netlist network with 3 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:            ANDNOT cells:        2\nABC RESULTS:                OR cells:        2\nABC RESULTS:              XNOR cells:        1\nABC RESULTS:        internal signals:        6\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_5806.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_5806'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_5806..\nRemoved 0 unused cells and 10 unused wires.\n<suppressed ~5 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_5806'. Setting top module to comb_5806.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_5806\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_5806\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_5806 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:           7\n   Number of public wire bits:       7\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_ANDNOT_                       2\n     $_OR_                           2\n     $_XNOR_                         1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_5806...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_5806 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:           7\n   Number of public wire bits:       7\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_ANDNOT_                       2\n     $_OR_                           2\n     $_XNOR_                         1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 9f093a3a59, CPU: user 0.04s system 0.00s, MEM: 13.89 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 5,
            "gate_counts": {
                "total": 5
            },
            "flip_flops": 0,
            "fan_in": 1,
            "fan_out": 2
        }
    },
    {
        "module": "fanin_9621",
        "template": "high_fanin",
        "rtl_code": "module fanin_9621(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_0_4;\n  or g_0_4(w_0_4, in8, in9);\n  wire w_0_5;\n  or g_0_5(w_0_5, in10, in11);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_1_2;\n  or g_1_2(w_1_2, w_0_4, w_0_5);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, w_1_2);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 12,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_9621.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_9621.v\nParsing Verilog input from `verilog_files/fanin_9621.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_9621'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_9621\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_9621\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_9621\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\nRemoved 0 unused cells and 11 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9621...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9621..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9621.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9621..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9621.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_9621:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9621..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9621.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9621..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9621.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~84 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_9621' to `<abc-temp-dir>/input.blif'..\nExtracted 11 gates and 23 wires to a netlist network with 12 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:       11\nABC RESULTS:        internal signals:       10\nABC RESULTS:           input signals:       12\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9621.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9621'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9621..\nRemoved 0 unused cells and 23 unused wires.\n<suppressed ~11 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_9621'. Setting top module to fanin_9621.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_9621\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_9621\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_9621 ===\n\n   Number of wires:                 24\n   Number of wire bits:             24\n   Number of public wires:          14\n   Number of public wire bits:      14\n   Number of ports:                 13\n   Number of port bits:             13\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 11\n     $_OR_                          11\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9621...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_9621 ===\n\n   Number of wires:                 24\n   Number of wire bits:             24\n   Number of public wires:          14\n   Number of public wire bits:      14\n   Number of ports:                 13\n   Number of port bits:             13\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 11\n     $_OR_                          11\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: dd742371bf, CPU: user 0.05s system 0.00s, MEM: 14.95 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 11
            },
            "flip_flops": 0,
            "fan_in": 4,
            "fan_out": 3
        }
    },
    {
        "module": "pipe_9355",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_9355(in0, in1, in2, clk, reset, out);\n  input clk, reset;\n  input in0, in1, in2;\n  output out;\n  wire stage0;\n  xor g0(stage0, in1, in2);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  and g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  or g2(stage2, stage2_ff, in0);\n  assign out = stage2;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 3,
            "num_pipeline_stages": 3,
            "expected_ff": 3,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_9355.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_9355.v\nParsing Verilog input from `verilog_files/pipe_9355.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_9355'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_9355\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_9355\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_9355\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_9355.v:15$4 in module pipe_9355.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_9355.v:8$2 in module pipe_9355.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_9355.$proc$verilog_files/pipe_9355.v:15$4'.\nFound async reset \\reset in `\\pipe_9355.$proc$verilog_files/pipe_9355.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_9355.$proc$verilog_files/pipe_9355.v:15$4'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_9355.$proc$verilog_files/pipe_9355.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_9355.\\stage2_ff' using process `\\pipe_9355.$proc$verilog_files/pipe_9355.v:15$4'.\n  created $adff cell `$procdff$8' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_9355.\\stage1_ff' using process `\\pipe_9355.$proc$verilog_files/pipe_9355.v:8$2'.\n  created $adff cell `$procdff$11' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_9355.$proc$verilog_files/pipe_9355.v:15$4'.\nRemoving empty process `pipe_9355.$proc$verilog_files/pipe_9355.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\nRemoved 1 unused cells and 8 unused wires.\n<suppressed ~3 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_9355...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9355..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9355.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9355..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9355.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_9355:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9355..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9355.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9355..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9355.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_9355' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 6 wires to a netlist network with 4 inputs and 2 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        1\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        4\nABC RESULTS:          output signals:        2\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9355.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9355'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9355..\nRemoved 0 unused cells and 6 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_9355'. Setting top module to pipe_9355.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_9355\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_9355\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_9355 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  4\n     $_DFF_PP0_                      2\n     $_OR_                           1\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_9355...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_9355 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  4\n     $_DFF_PP0_                      2\n     $_OR_                           1\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 142362474e, CPU: user 0.04s system 0.00s, MEM: 14.55 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 4
            },
            "flip_flops": 3,
            "fan_in": 1,
            "fan_out": 3
        }
    },
    {
        "module": "comb_4920",
        "template": "simple_comb",
        "rtl_code": "module comb_4920(in0, in1, out);\n  input in0, in1;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  xor g0(w0, in1, in0);\n  xor g1(w1, w0, in0);\n  and g2(w2, w1, in1);\n  or g3(w3, w2, in1);\n  nand g4(w4, w3, in0);\n  assign out = w4;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 2,
            "num_gates": 5,
            "expected_ff": 0,
            "expected_comb_depth": 5
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_4920.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_4920.v\nParsing Verilog input from `verilog_files/comb_4920.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_4920'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_4920\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_4920\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_4920\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_4920...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_4920..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_4920.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_4920..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_4920.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_4920:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_4920..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_4920.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_4920..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_4920.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nNo more expansions possible.\n<suppressed ~79 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_4920' to `<abc-temp-dir>/input.blif'..\nExtracted 6 gates and 8 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:              NAND cells:        1\nABC RESULTS:        internal signals:        5\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_4920.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_4920'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_4920..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~5 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_4920'. Setting top module to comb_4920.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_4920\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_4920\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_4920 ===\n\n   Number of wires:                  4\n   Number of wire bits:              4\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  1\n     $_NAND_                         1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_4920...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_4920 ===\n\n   Number of wires:                  4\n   Number of wire bits:              4\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  1\n     $_NAND_                         1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: a6b4b1274f, CPU: user 0.04s system 0.01s, MEM: 14.30 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 5,
            "gate_counts": {
                "total": 1
            },
            "flip_flops": 0,
            "fan_in": 1,
            "fan_out": 1
        }
    },
    {
        "module": "comb_7429",
        "template": "simple_comb",
        "rtl_code": "module comb_7429(in0, in1, in2, out);\n  input in0, in1, in2;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  nand g0(w0, in0, in0);\n  xor g1(w1, w0, in2);\n  nor g2(w2, w1, in0);\n  assign out = w2;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 3,
            "num_gates": 3,
            "expected_ff": 0,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_7429.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_7429.v\nParsing Verilog input from `verilog_files/comb_7429.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_7429'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_7429\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_7429\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_7429\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n<suppressed ~1 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_7429...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7429..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7429.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7429..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7429.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_7429:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7429..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7429.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7429..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7429.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_7429' to `<abc-temp-dir>/input.blif'..\nExtracted 4 gates and 6 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:            ANDNOT cells:        1\nABC RESULTS:        internal signals:        3\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7429.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7429'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7429..\nRemoved 0 unused cells and 6 unused wires.\n<suppressed ~3 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_7429'. Setting top module to comb_7429.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_7429\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_7429\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_7429 ===\n\n   Number of wires:                  5\n   Number of wire bits:              5\n   Number of public wires:           5\n   Number of public wire bits:       5\n   Number of ports:                  4\n   Number of port bits:              4\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  1\n     $_ANDNOT_                       1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_7429...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_7429 ===\n\n   Number of wires:                  5\n   Number of wire bits:              5\n   Number of public wires:           5\n   Number of public wire bits:       5\n   Number of ports:                  4\n   Number of port bits:              4\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  1\n     $_ANDNOT_                       1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 13a9ad3df7, CPU: user 0.05s system 0.01s, MEM: 15.20 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 1
            },
            "flip_flops": 0,
            "fan_in": 2,
            "fan_out": 4
        }
    },
    {
        "module": "multiclk_8285",
        "template": "multi_clock",
        "rtl_code": "module multiclk_8285(in0, in1, in2, in3, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2, in3;\n  output out;\n  wire comb1;\n  or g0(comb1, in0, in2);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 4,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_8285.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_8285.v\nParsing Verilog input from `verilog_files/multiclk_8285.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_8285'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_8285\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_8285\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_8285\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_8285.v:13$3 in module multiclk_8285.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_8285.v:8$2 in module multiclk_8285.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_8285.$proc$verilog_files/multiclk_8285.v:13$3'.\nFound async reset \\reset in `\\multiclk_8285.$proc$verilog_files/multiclk_8285.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_8285.$proc$verilog_files/multiclk_8285.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_8285.$proc$verilog_files/multiclk_8285.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_8285.\\cross_domain' using process `\\multiclk_8285.$proc$verilog_files/multiclk_8285.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_8285.\\reg1' using process `\\multiclk_8285.$proc$verilog_files/multiclk_8285.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_8285.$proc$verilog_files/multiclk_8285.v:13$3'.\nRemoving empty process `multiclk_8285.$proc$verilog_files/multiclk_8285.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_8285...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8285..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8285.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8285..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8285.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_8285:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8285..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8285.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_8285..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_8285.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_8285' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_8285.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_8285'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_8285..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_8285'. Setting top module to multiclk_8285.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_8285\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_8285\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_8285 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_8285...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_8285 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 6b29fc94b4, CPU: user 0.04s system 0.00s, MEM: 14.91 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 2,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_1932",
        "template": "multi_clock",
        "rtl_code": "module multiclk_1932(in0, in1, in2, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2;\n  output out;\n  wire comb1;\n  nor g0(comb1, in2, in0);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 3,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_1932.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_1932.v\nParsing Verilog input from `verilog_files/multiclk_1932.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_1932'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_1932\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1932\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1932\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1932.v:13$4 in module multiclk_1932.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1932.v:8$3 in module multiclk_1932.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_1932.$proc$verilog_files/multiclk_1932.v:13$4'.\nFound async reset \\reset in `\\multiclk_1932.$proc$verilog_files/multiclk_1932.v:8$3'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_1932.$proc$verilog_files/multiclk_1932.v:13$4'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_1932.$proc$verilog_files/multiclk_1932.v:8$3'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_1932.\\cross_domain' using process `\\multiclk_1932.$proc$verilog_files/multiclk_1932.v:13$4'.\n  created $adff cell `$procdff$7' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_1932.\\reg1' using process `\\multiclk_1932.$proc$verilog_files/multiclk_1932.v:8$3'.\n  created $adff cell `$procdff$10' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_1932.$proc$verilog_files/multiclk_1932.v:13$4'.\nRemoving empty process `multiclk_1932.$proc$verilog_files/multiclk_1932.v:8$3'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1932...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1932..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1932.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1932..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1932.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_1932:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1932..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1932.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1932..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1932.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_1932' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               NOR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1932.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1932'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1932..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_1932'. Setting top module to multiclk_1932.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1932\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1932\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_1932 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1932...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_1932 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 6c0154ec6d, CPU: user 0.04s system 0.00s, MEM: 14.45 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 54% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 1,
            "fan_out": 2
        }
    },
    {
        "module": "comb_2416",
        "template": "simple_comb",
        "rtl_code": "module comb_2416(in0, in1, in2, in3, in4, out);\n  input in0, in1, in2, in3, in4;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  wire w5;\n  and g0(w0, in2, in3);\n  nand g1(w1, w0, in4);\n  xor g2(w2, w1, in1);\n  nor g3(w3, w2, in3);\n  xor g4(w4, w3, in3);\n  nand g5(w5, w4, in0);\n  assign out = w5;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 5,
            "num_gates": 6,
            "expected_ff": 0,
            "expected_comb_depth": 6
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_2416.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_2416.v\nParsing Verilog input from `verilog_files/comb_2416.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_2416'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_2416\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_2416\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_2416\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\nRemoved 0 unused cells and 6 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_2416...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_2416..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_2416.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_2416..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_2416.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_2416:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_2416..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_2416.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_2416..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_2416.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~82 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_2416' to `<abc-temp-dir>/input.blif'..\nExtracted 9 gates and 14 wires to a netlist network with 5 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:            ANDNOT cells:        1\nABC RESULTS:              NAND cells:        2\nABC RESULTS:                OR cells:        1\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        8\nABC RESULTS:           input signals:        5\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_2416.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_2416'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_2416..\nRemoved 0 unused cells and 14 unused wires.\n<suppressed ~6 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_2416'. Setting top module to comb_2416.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_2416\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_2416\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_2416 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:           7\n   Number of public wire bits:       7\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_ANDNOT_                       1\n     $_NAND_                         2\n     $_OR_                           1\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_2416...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_2416 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:           7\n   Number of public wire bits:       7\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_ANDNOT_                       1\n     $_NAND_                         2\n     $_OR_                           1\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: b008f462c4, CPU: user 0.05s system 0.01s, MEM: 14.69 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 6,
            "gate_counts": {
                "total": 5
            },
            "flip_flops": 0,
            "fan_in": 4,
            "fan_out": 1
        }
    },
    {
        "module": "multiclk_1841",
        "template": "multi_clock",
        "rtl_code": "module multiclk_1841(in0, in1, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1;\n  output out;\n  wire comb1;\n  or g0(comb1, in0, in1);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 2,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_1841.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_1841.v\nParsing Verilog input from `verilog_files/multiclk_1841.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_1841'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_1841\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1841\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1841\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1841.v:13$3 in module multiclk_1841.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1841.v:8$2 in module multiclk_1841.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_1841.$proc$verilog_files/multiclk_1841.v:13$3'.\nFound async reset \\reset in `\\multiclk_1841.$proc$verilog_files/multiclk_1841.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_1841.$proc$verilog_files/multiclk_1841.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_1841.$proc$verilog_files/multiclk_1841.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_1841.\\cross_domain' using process `\\multiclk_1841.$proc$verilog_files/multiclk_1841.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_1841.\\reg1' using process `\\multiclk_1841.$proc$verilog_files/multiclk_1841.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_1841.$proc$verilog_files/multiclk_1841.v:13$3'.\nRemoving empty process `multiclk_1841.$proc$verilog_files/multiclk_1841.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1841...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1841..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1841.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1841..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1841.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_1841:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1841..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1841.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1841..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1841.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_1841' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1841.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1841'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1841..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_1841'. Setting top module to multiclk_1841.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1841\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1841\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_1841 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1841...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_1841 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 13b79909d3, CPU: user 0.04s system 0.00s, MEM: 14.77 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 1,
            "fan_out": 1
        }
    },
    {
        "module": "fanin_4059",
        "template": "high_fanin",
        "rtl_code": "module fanin_4059(in0, in1, in2, in3, in4, in5, in6, in7, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  assign out = w_2_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 8,
            "expected_ff": 0,
            "or_tree_levels": 3,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_4059.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_4059.v\nParsing Verilog input from `verilog_files/fanin_4059.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_4059'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_4059\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_4059\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_4059\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\nRemoved 0 unused cells and 7 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4059...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4059..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4059.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4059..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4059.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_4059:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4059..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4059.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4059..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4059.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~80 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_4059' to `<abc-temp-dir>/input.blif'..\nExtracted 7 gates and 15 wires to a netlist network with 8 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        7\nABC RESULTS:        internal signals:        6\nABC RESULTS:           input signals:        8\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4059.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4059'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4059..\nRemoved 0 unused cells and 15 unused wires.\n<suppressed ~7 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_4059'. Setting top module to fanin_4059.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_4059\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_4059\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_4059 ===\n\n   Number of wires:                 16\n   Number of wire bits:             16\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  9\n   Number of port bits:              9\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  7\n     $_OR_                           7\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4059...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_4059 ===\n\n   Number of wires:                 16\n   Number of wire bits:             16\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  9\n   Number of port bits:              9\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  7\n     $_OR_                           7\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: eb50e2113e, CPU: user 0.05s system 0.01s, MEM: 14.45 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 7
            },
            "flip_flops": 0,
            "fan_in": 4,
            "fan_out": 3
        }
    },
    {
        "module": "pipe_4337",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_4337(in0, in1, in2, in3, clk, reset, out);\n  input clk, reset;\n  input in0, in1, in2, in3;\n  output out;\n  wire stage0;\n  nand g0(stage0, in1, in3);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  nand g1(stage1, stage1_ff, in3);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  nor g2(stage2, stage2_ff, in2);\n  reg stage3_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage3_ff <= 0;\n    else stage3_ff <= stage2_ff;\n  end\n  wire stage3;\n  xor g3(stage3, stage3_ff, in0);\n  assign out = stage3;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 4,
            "num_pipeline_stages": 4,
            "expected_ff": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_4337.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_4337.v\nParsing Verilog input from `verilog_files/pipe_4337.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_4337'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_4337\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_4337\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_4337\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_4337.v:22$9 in module pipe_4337.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_4337.v:15$6 in module pipe_4337.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_4337.v:8$3 in module pipe_4337.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 3 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_4337.$proc$verilog_files/pipe_4337.v:22$9'.\nFound async reset \\reset in `\\pipe_4337.$proc$verilog_files/pipe_4337.v:15$6'.\nFound async reset \\reset in `\\pipe_4337.$proc$verilog_files/pipe_4337.v:8$3'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_4337.$proc$verilog_files/pipe_4337.v:22$9'.\n     1/1: $0\\stage3_ff[0:0]\nCreating decoders for process `\\pipe_4337.$proc$verilog_files/pipe_4337.v:15$6'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_4337.$proc$verilog_files/pipe_4337.v:8$3'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_4337.\\stage3_ff' using process `\\pipe_4337.$proc$verilog_files/pipe_4337.v:22$9'.\n  created $adff cell `$procdff$13' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_4337.\\stage2_ff' using process `\\pipe_4337.$proc$verilog_files/pipe_4337.v:15$6'.\n  created $adff cell `$procdff$16' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_4337.\\stage1_ff' using process `\\pipe_4337.$proc$verilog_files/pipe_4337.v:8$3'.\n  created $adff cell `$procdff$19' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_4337.$proc$verilog_files/pipe_4337.v:22$9'.\nRemoving empty process `pipe_4337.$proc$verilog_files/pipe_4337.v:15$6'.\nRemoving empty process `pipe_4337.$proc$verilog_files/pipe_4337.v:8$3'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n<suppressed ~3 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\nRemoved 4 unused cells and 14 unused wires.\n<suppressed ~7 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_4337...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_4337..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_4337.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_4337..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_4337.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_4337:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_4337..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_4337.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_4337..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_4337.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~79 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_4337' to `<abc-temp-dir>/input.blif'..\nExtracted 3 gates and 7 wires to a netlist network with 4 inputs and 2 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:              NAND cells:        1\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        4\nABC RESULTS:          output signals:        2\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_4337.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_4337'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_4337..\nRemoved 0 unused cells and 7 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_4337'. Setting top module to pipe_4337.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_4337\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_4337\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_4337 ===\n\n   Number of wires:                 12\n   Number of wire bits:             12\n   Number of public wires:          12\n   Number of public wire bits:      12\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_DFF_PP0_                      3\n     $_NAND_                         1\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_4337...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_4337 ===\n\n   Number of wires:                 12\n   Number of wire bits:             12\n   Number of public wires:          12\n   Number of public wire bits:      12\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_DFF_PP0_                      3\n     $_NAND_                         1\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 690d04a64e, CPU: user 0.05s system 0.01s, MEM: 15.16 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 5
            },
            "flip_flops": 4,
            "fan_in": 4,
            "fan_out": 4
        }
    },
    {
        "module": "fanin_9888",
        "template": "high_fanin",
        "rtl_code": "module fanin_9888(in0, in1, in2, in3, in4, in5, in6, in7, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  assign out = w_2_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 8,
            "expected_ff": 0,
            "or_tree_levels": 3,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_9888.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_9888.v\nParsing Verilog input from `verilog_files/fanin_9888.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_9888'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_9888\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_9888\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_9888\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\nRemoved 0 unused cells and 7 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9888...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9888..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9888.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9888..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9888.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_9888:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9888..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9888.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9888..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9888.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~80 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_9888' to `<abc-temp-dir>/input.blif'..\nExtracted 7 gates and 15 wires to a netlist network with 8 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        7\nABC RESULTS:        internal signals:        6\nABC RESULTS:           input signals:        8\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9888.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9888'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9888..\nRemoved 0 unused cells and 15 unused wires.\n<suppressed ~7 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_9888'. Setting top module to fanin_9888.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_9888\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_9888\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_9888 ===\n\n   Number of wires:                 16\n   Number of wire bits:             16\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  9\n   Number of port bits:              9\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  7\n     $_OR_                           7\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9888...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_9888 ===\n\n   Number of wires:                 16\n   Number of wire bits:             16\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  9\n   Number of port bits:              9\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  7\n     $_OR_                           7\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 61e262d9ee, CPU: user 0.05s system 0.01s, MEM: 15.14 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 14% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 7
            },
            "flip_flops": 0,
            "fan_in": 3,
            "fan_out": 1
        }
    },
    {
        "module": "pipe_2975",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_2975(in0, in1, in2, in3, clk, reset, out);\n  input clk, reset;\n  input in0, in1, in2, in3;\n  output out;\n  wire stage0;\n  nand g0(stage0, in2, in3);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  nand g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  xor g2(stage2, stage2_ff, in1);\n  reg stage3_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage3_ff <= 0;\n    else stage3_ff <= stage2_ff;\n  end\n  wire stage3;\n  nor g3(stage3, stage3_ff, in0);\n  reg stage4_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage4_ff <= 0;\n    else stage4_ff <= stage3_ff;\n  end\n  wire stage4;\n  nor g4(stage4, stage4_ff, in3);\n  assign out = stage4;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 4,
            "num_pipeline_stages": 5,
            "expected_ff": 5,
            "expected_comb_depth": 5
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_2975.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_2975.v\nParsing Verilog input from `verilog_files/pipe_2975.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_2975'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_2975\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_2975\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_2975\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2975.v:29$11 in module pipe_2975.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2975.v:22$8 in module pipe_2975.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2975.v:15$6 in module pipe_2975.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2975.v:8$3 in module pipe_2975.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 4 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_2975.$proc$verilog_files/pipe_2975.v:29$11'.\nFound async reset \\reset in `\\pipe_2975.$proc$verilog_files/pipe_2975.v:22$8'.\nFound async reset \\reset in `\\pipe_2975.$proc$verilog_files/pipe_2975.v:15$6'.\nFound async reset \\reset in `\\pipe_2975.$proc$verilog_files/pipe_2975.v:8$3'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:29$11'.\n     1/1: $0\\stage4_ff[0:0]\nCreating decoders for process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:22$8'.\n     1/1: $0\\stage3_ff[0:0]\nCreating decoders for process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:15$6'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:8$3'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_2975.\\stage4_ff' using process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:29$11'.\n  created $adff cell `$procdff$16' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_2975.\\stage3_ff' using process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:22$8'.\n  created $adff cell `$procdff$19' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_2975.\\stage2_ff' using process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:15$6'.\n  created $adff cell `$procdff$22' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_2975.\\stage1_ff' using process `\\pipe_2975.$proc$verilog_files/pipe_2975.v:8$3'.\n  created $adff cell `$procdff$25' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_2975.$proc$verilog_files/pipe_2975.v:29$11'.\nRemoving empty process `pipe_2975.$proc$verilog_files/pipe_2975.v:22$8'.\nRemoving empty process `pipe_2975.$proc$verilog_files/pipe_2975.v:15$6'.\nRemoving empty process `pipe_2975.$proc$verilog_files/pipe_2975.v:8$3'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n<suppressed ~4 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\nRemoved 5 unused cells and 18 unused wires.\n<suppressed ~9 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_2975...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2975..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2975.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2975..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2975.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_2975:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2975..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2975.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2975..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2975.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~81 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_2975' to `<abc-temp-dir>/input.blif'..\nExtracted 4 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:              NAND cells:        1\nABC RESULTS:               NOR cells:        1\nABC RESULTS:        internal signals:        2\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        2\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2975.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2975'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2975..\nRemoved 0 unused cells and 7 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_2975'. Setting top module to pipe_2975.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_2975\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_2975\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_2975 ===\n\n   Number of wires:                 13\n   Number of wire bits:             13\n   Number of public wires:          13\n   Number of public wire bits:      13\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  6\n     $_DFF_PP0_                      4\n     $_NAND_                         1\n     $_NOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_2975...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_2975 ===\n\n   Number of wires:                 13\n   Number of wire bits:             13\n   Number of public wires:          13\n   Number of public wire bits:      13\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  6\n     $_DFF_PP0_                      4\n     $_NAND_                         1\n     $_NOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 0be0030b1c, CPU: user 0.05s system 0.01s, MEM: 14.89 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 5,
            "gate_counts": {
                "total": 6
            },
            "flip_flops": 5,
            "fan_in": 1,
            "fan_out": 4
        }
    },
    {
        "module": "pipe_2109",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_2109(in0, in1, clk, reset, out);\n  input clk, reset;\n  input in0, in1;\n  output out;\n  wire stage0;\n  or g0(stage0, in1, in0);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  and g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  and g2(stage2, stage2_ff, in0);\n  assign out = stage2;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 2,
            "num_pipeline_stages": 3,
            "expected_ff": 3,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_2109.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_2109.v\nParsing Verilog input from `verilog_files/pipe_2109.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_2109'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_2109\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_2109\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_2109\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2109.v:15$4 in module pipe_2109.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2109.v:8$2 in module pipe_2109.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_2109.$proc$verilog_files/pipe_2109.v:15$4'.\nFound async reset \\reset in `\\pipe_2109.$proc$verilog_files/pipe_2109.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_2109.$proc$verilog_files/pipe_2109.v:15$4'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_2109.$proc$verilog_files/pipe_2109.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_2109.\\stage2_ff' using process `\\pipe_2109.$proc$verilog_files/pipe_2109.v:15$4'.\n  created $adff cell `$procdff$8' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_2109.\\stage1_ff' using process `\\pipe_2109.$proc$verilog_files/pipe_2109.v:8$2'.\n  created $adff cell `$procdff$11' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_2109.$proc$verilog_files/pipe_2109.v:15$4'.\nRemoving empty process `pipe_2109.$proc$verilog_files/pipe_2109.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\nRemoved 1 unused cells and 8 unused wires.\n<suppressed ~3 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_2109...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2109..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2109.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2109..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2109.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_2109:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2109..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2109.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2109..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2109.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_2109' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 5 wires to a netlist network with 3 inputs and 2 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               AND cells:        1\nABC RESULTS:                OR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        2\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2109.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2109'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2109..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_2109'. Setting top module to pipe_2109.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_2109\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_2109\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_2109 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  4\n     $_AND_                          1\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_2109...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_2109 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  4\n     $_AND_                          1\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 3da2759b84, CPU: user 0.04s system 0.01s, MEM: 15.11 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 14% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 4
            },
            "flip_flops": 3,
            "fan_in": 4,
            "fan_out": 4
        }
    },
    {
        "module": "multiclk_1228",
        "template": "multi_clock",
        "rtl_code": "module multiclk_1228(in0, in1, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1;\n  output out;\n  wire comb1;\n  and g0(comb1, in1, in0);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 2,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_1228.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_1228.v\nParsing Verilog input from `verilog_files/multiclk_1228.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_1228'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_1228\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1228\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1228\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1228.v:13$3 in module multiclk_1228.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_1228.v:8$2 in module multiclk_1228.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_1228.$proc$verilog_files/multiclk_1228.v:13$3'.\nFound async reset \\reset in `\\multiclk_1228.$proc$verilog_files/multiclk_1228.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_1228.$proc$verilog_files/multiclk_1228.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_1228.$proc$verilog_files/multiclk_1228.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_1228.\\cross_domain' using process `\\multiclk_1228.$proc$verilog_files/multiclk_1228.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_1228.\\reg1' using process `\\multiclk_1228.$proc$verilog_files/multiclk_1228.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_1228.$proc$verilog_files/multiclk_1228.v:13$3'.\nRemoving empty process `multiclk_1228.$proc$verilog_files/multiclk_1228.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1228...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1228..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1228.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1228..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1228.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_1228:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1228..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1228.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_1228..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_1228.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_1228' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               AND cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_1228.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_1228'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_1228..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_1228'. Setting top module to multiclk_1228.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_1228\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_1228\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_1228 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_AND_                          1\n     $_DFF_PP0_                      2\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_1228...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_1228 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_AND_                          1\n     $_DFF_PP0_                      2\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 343bfc03f1, CPU: user 0.04s system 0.01s, MEM: 14.89 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 4,
            "fan_out": 4
        }
    },
    {
        "module": "fanin_9736",
        "template": "high_fanin",
        "rtl_code": "module fanin_9736(in0, in1, in2, in3, in4, in5, in6, in7, in8, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, in8);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 9,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_9736.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_9736.v\nParsing Verilog input from `verilog_files/fanin_9736.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_9736'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_9736\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_9736\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_9736\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9736...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9736..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9736.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9736..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9736.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_9736:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9736..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9736.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9736..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9736.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~81 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_9736' to `<abc-temp-dir>/input.blif'..\nExtracted 8 gates and 17 wires to a netlist network with 9 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        8\nABC RESULTS:        internal signals:        7\nABC RESULTS:           input signals:        9\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9736.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9736'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9736..\nRemoved 0 unused cells and 17 unused wires.\n<suppressed ~8 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_9736'. Setting top module to fanin_9736.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_9736\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_9736\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_9736 ===\n\n   Number of wires:                 18\n   Number of wire bits:             18\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                 10\n   Number of port bits:             10\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_OR_                           8\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9736...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_9736 ===\n\n   Number of wires:                 18\n   Number of wire bits:             18\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                 10\n   Number of port bits:             10\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_OR_                           8\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 7f31977c9a, CPU: user 0.05s system 0.01s, MEM: 14.84 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 8
            },
            "flip_flops": 0,
            "fan_in": 3,
            "fan_out": 1
        }
    },
    {
        "module": "pipe_9531",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_9531(in0, in1, clk, reset, out);\n  input clk, reset;\n  input in0, in1;\n  output out;\n  wire stage0;\n  and g0(stage0, in0, in0);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  xor g1(stage1, stage1_ff, in1);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  or g2(stage2, stage2_ff, in1);\n  assign out = stage2;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 2,
            "num_pipeline_stages": 3,
            "expected_ff": 3,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_9531.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_9531.v\nParsing Verilog input from `verilog_files/pipe_9531.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_9531'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_9531\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_9531\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_9531\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_9531.v:15$4 in module pipe_9531.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_9531.v:8$2 in module pipe_9531.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_9531.$proc$verilog_files/pipe_9531.v:15$4'.\nFound async reset \\reset in `\\pipe_9531.$proc$verilog_files/pipe_9531.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_9531.$proc$verilog_files/pipe_9531.v:15$4'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_9531.$proc$verilog_files/pipe_9531.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_9531.\\stage2_ff' using process `\\pipe_9531.$proc$verilog_files/pipe_9531.v:15$4'.\n  created $adff cell `$procdff$8' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_9531.\\stage1_ff' using process `\\pipe_9531.$proc$verilog_files/pipe_9531.v:8$2'.\n  created $adff cell `$procdff$11' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_9531.$proc$verilog_files/pipe_9531.v:15$4'.\nRemoving empty process `pipe_9531.$proc$verilog_files/pipe_9531.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n<suppressed ~3 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\nRemoved 1 unused cells and 8 unused wires.\n<suppressed ~3 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_9531...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9531..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9531.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9531..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9531.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_9531:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9531..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9531.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9531..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9531.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_9531' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9531.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9531'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9531..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_9531'. Setting top module to pipe_9531.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_9531\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_9531\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_9531 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_9531...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_9531 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_OR_                           1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 501675d82a, CPU: user 0.04s system 0.00s, MEM: 14.66 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 3,
            "fan_in": 4,
            "fan_out": 1
        }
    },
    {
        "module": "pipe_9515",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_9515(in0, in1, in2, clk, reset, out);\n  input clk, reset;\n  input in0, in1, in2;\n  output out;\n  wire stage0;\n  xor g0(stage0, in0, in2);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  nand g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  nor g2(stage2, stage2_ff, in2);\n  reg stage3_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage3_ff <= 0;\n    else stage3_ff <= stage2_ff;\n  end\n  wire stage3;\n  nand g3(stage3, stage3_ff, in2);\n  assign out = stage3;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 3,
            "num_pipeline_stages": 4,
            "expected_ff": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_9515.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_9515.v\nParsing Verilog input from `verilog_files/pipe_9515.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_9515'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_9515\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_9515\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_9515\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_9515.v:22$8 in module pipe_9515.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_9515.v:15$5 in module pipe_9515.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_9515.v:8$2 in module pipe_9515.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 3 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_9515.$proc$verilog_files/pipe_9515.v:22$8'.\nFound async reset \\reset in `\\pipe_9515.$proc$verilog_files/pipe_9515.v:15$5'.\nFound async reset \\reset in `\\pipe_9515.$proc$verilog_files/pipe_9515.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_9515.$proc$verilog_files/pipe_9515.v:22$8'.\n     1/1: $0\\stage3_ff[0:0]\nCreating decoders for process `\\pipe_9515.$proc$verilog_files/pipe_9515.v:15$5'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_9515.$proc$verilog_files/pipe_9515.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_9515.\\stage3_ff' using process `\\pipe_9515.$proc$verilog_files/pipe_9515.v:22$8'.\n  created $adff cell `$procdff$13' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_9515.\\stage2_ff' using process `\\pipe_9515.$proc$verilog_files/pipe_9515.v:15$5'.\n  created $adff cell `$procdff$16' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_9515.\\stage1_ff' using process `\\pipe_9515.$proc$verilog_files/pipe_9515.v:8$2'.\n  created $adff cell `$procdff$19' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_9515.$proc$verilog_files/pipe_9515.v:22$8'.\nRemoving empty process `pipe_9515.$proc$verilog_files/pipe_9515.v:15$5'.\nRemoving empty process `pipe_9515.$proc$verilog_files/pipe_9515.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n<suppressed ~3 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\nRemoved 4 unused cells and 14 unused wires.\n<suppressed ~7 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_9515...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9515..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9515.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9515..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9515.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_9515:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9515..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9515.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_9515..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_9515.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~79 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_9515' to `<abc-temp-dir>/input.blif'..\nExtracted 3 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:              NAND cells:        1\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        2\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_9515.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_9515'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_9515..\nRemoved 0 unused cells and 6 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_9515'. Setting top module to pipe_9515.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_9515\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_9515\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_9515 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_DFF_PP0_                      3\n     $_NAND_                         1\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_9515...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_9515 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_DFF_PP0_                      3\n     $_NAND_                         1\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 2fc578c75e, CPU: user 0.05s system 0.00s, MEM: 14.77 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 5
            },
            "flip_flops": 4,
            "fan_in": 2,
            "fan_out": 1
        }
    },
    {
        "module": "multiclk_9674",
        "template": "multi_clock",
        "rtl_code": "module multiclk_9674(in0, in1, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1;\n  output out;\n  wire comb1;\n  and g0(comb1, in1, in0);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 2,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_9674.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_9674.v\nParsing Verilog input from `verilog_files/multiclk_9674.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_9674'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_9674\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9674\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9674\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9674.v:13$3 in module multiclk_9674.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9674.v:8$2 in module multiclk_9674.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_9674.$proc$verilog_files/multiclk_9674.v:13$3'.\nFound async reset \\reset in `\\multiclk_9674.$proc$verilog_files/multiclk_9674.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_9674.$proc$verilog_files/multiclk_9674.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_9674.$proc$verilog_files/multiclk_9674.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_9674.\\cross_domain' using process `\\multiclk_9674.$proc$verilog_files/multiclk_9674.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_9674.\\reg1' using process `\\multiclk_9674.$proc$verilog_files/multiclk_9674.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_9674.$proc$verilog_files/multiclk_9674.v:13$3'.\nRemoving empty process `multiclk_9674.$proc$verilog_files/multiclk_9674.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9674...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9674..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9674.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9674..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9674.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_9674:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9674..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9674.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9674..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9674.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_9674' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               AND cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9674.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9674'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9674..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_9674'. Setting top module to multiclk_9674.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9674\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9674\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_9674 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_AND_                          1\n     $_DFF_PP0_                      2\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9674...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_9674 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_AND_                          1\n     $_DFF_PP0_                      2\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: c830ed96a0, CPU: user 0.04s system 0.00s, MEM: 13.94 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 54% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 4,
            "fan_out": 2
        }
    },
    {
        "module": "comb_7217",
        "template": "simple_comb",
        "rtl_code": "module comb_7217(in0, in1, out);\n  input in0, in1;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  xor g0(w0, in1, in0);\n  and g1(w1, w0, in0);\n  nand g2(w2, w1, in0);\n  nor g3(w3, w2, in1);\n  assign out = w3;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 2,
            "num_gates": 4,
            "expected_ff": 0,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_7217.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_7217.v\nParsing Verilog input from `verilog_files/comb_7217.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_7217'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_7217\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_7217\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_7217\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_7217...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7217..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7217.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7217..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7217.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_7217:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7217..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7217.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_7217..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_7217.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~79 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_7217' to `<abc-temp-dir>/input.blif'..\nExtracted 6 gates and 8 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:            ANDNOT cells:        1\nABC RESULTS:        internal signals:        5\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_7217.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_7217'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_7217..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~4 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_7217'. Setting top module to comb_7217.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_7217\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_7217\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_7217 ===\n\n   Number of wires:                  4\n   Number of wire bits:              4\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  1\n     $_ANDNOT_                       1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_7217...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_7217 ===\n\n   Number of wires:                  4\n   Number of wire bits:              4\n   Number of public wires:           4\n   Number of public wire bits:       4\n   Number of ports:                  3\n   Number of port bits:              3\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  1\n     $_ANDNOT_                       1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: f80606b4fa, CPU: user 0.04s system 0.01s, MEM: 14.61 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 1
            },
            "flip_flops": 0,
            "fan_in": 2,
            "fan_out": 2
        }
    },
    {
        "module": "fanin_4628",
        "template": "high_fanin",
        "rtl_code": "module fanin_4628(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_0_4;\n  or g_0_4(w_0_4, in8, in9);\n  wire w_0_5;\n  or g_0_5(w_0_5, in10, in11);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_1_2;\n  or g_1_2(w_1_2, w_0_4, w_0_5);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_2_1;\n  or g_2_1(w_2_1, w_1_2, in12);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, w_2_1);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 13,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_4628.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_4628.v\nParsing Verilog input from `verilog_files/fanin_4628.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_4628'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_4628\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_4628\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_4628\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\nRemoved 0 unused cells and 12 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4628...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4628..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4628.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4628..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4628.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_4628:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4628..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4628.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_4628..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_4628.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~85 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_4628' to `<abc-temp-dir>/input.blif'..\nExtracted 12 gates and 25 wires to a netlist network with 13 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:       12\nABC RESULTS:        internal signals:       11\nABC RESULTS:           input signals:       13\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_4628.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_4628'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_4628..\nRemoved 0 unused cells and 25 unused wires.\n<suppressed ~12 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_4628'. Setting top module to fanin_4628.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_4628\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_4628\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_4628 ===\n\n   Number of wires:                 26\n   Number of wire bits:             26\n   Number of public wires:          15\n   Number of public wire bits:      15\n   Number of ports:                 14\n   Number of port bits:             14\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 12\n     $_OR_                          12\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_4628...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_4628 ===\n\n   Number of wires:                 26\n   Number of wire bits:             26\n   Number of public wires:          15\n   Number of public wire bits:      15\n   Number of ports:                 14\n   Number of port bits:             14\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 12\n     $_OR_                          12\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 76640d92fe, CPU: user 0.05s system 0.01s, MEM: 15.19 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 51% 1x abc (0 sec), 14% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 12
            },
            "flip_flops": 0,
            "fan_in": 3,
            "fan_out": 3
        }
    },
    {
        "module": "pipe_8340",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_8340(in0, in1, in2, clk, reset, out);\n  input clk, reset;\n  input in0, in1, in2;\n  output out;\n  wire stage0;\n  xor g0(stage0, in1, in1);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  nor g1(stage1, stage1_ff, in1);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  nand g2(stage2, stage2_ff, in2);\n  reg stage3_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage3_ff <= 0;\n    else stage3_ff <= stage2_ff;\n  end\n  wire stage3;\n  nor g3(stage3, stage3_ff, in2);\n  reg stage4_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage4_ff <= 0;\n    else stage4_ff <= stage3_ff;\n  end\n  wire stage4;\n  xor g4(stage4, stage4_ff, in1);\n  reg stage5_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage5_ff <= 0;\n    else stage5_ff <= stage4_ff;\n  end\n  wire stage5;\n  nor g5(stage5, stage5_ff, in0);\n  reg stage6_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage6_ff <= 0;\n    else stage6_ff <= stage5_ff;\n  end\n  wire stage6;\n  xor g6(stage6, stage6_ff, in0);\n  assign out = stage6;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 3,
            "num_pipeline_stages": 7,
            "expected_ff": 7,
            "expected_comb_depth": 7
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_8340.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_8340.v\nParsing Verilog input from `verilog_files/pipe_8340.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_8340'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_8340\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_8340\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_8340\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_8340.v:43$16 in module pipe_8340.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_8340.v:36$13 in module pipe_8340.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_8340.v:29$11 in module pipe_8340.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_8340.v:22$8 in module pipe_8340.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_8340.v:15$5 in module pipe_8340.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_8340.v:8$2 in module pipe_8340.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 6 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_8340.$proc$verilog_files/pipe_8340.v:43$16'.\nFound async reset \\reset in `\\pipe_8340.$proc$verilog_files/pipe_8340.v:36$13'.\nFound async reset \\reset in `\\pipe_8340.$proc$verilog_files/pipe_8340.v:29$11'.\nFound async reset \\reset in `\\pipe_8340.$proc$verilog_files/pipe_8340.v:22$8'.\nFound async reset \\reset in `\\pipe_8340.$proc$verilog_files/pipe_8340.v:15$5'.\nFound async reset \\reset in `\\pipe_8340.$proc$verilog_files/pipe_8340.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:43$16'.\n     1/1: $0\\stage6_ff[0:0]\nCreating decoders for process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:36$13'.\n     1/1: $0\\stage5_ff[0:0]\nCreating decoders for process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:29$11'.\n     1/1: $0\\stage4_ff[0:0]\nCreating decoders for process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:22$8'.\n     1/1: $0\\stage3_ff[0:0]\nCreating decoders for process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:15$5'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_8340.\\stage6_ff' using process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:43$16'.\n  created $adff cell `$procdff$20' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_8340.\\stage5_ff' using process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:36$13'.\n  created $adff cell `$procdff$23' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_8340.\\stage4_ff' using process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:29$11'.\n  created $adff cell `$procdff$26' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_8340.\\stage3_ff' using process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:22$8'.\n  created $adff cell `$procdff$29' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_8340.\\stage2_ff' using process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:15$5'.\n  created $adff cell `$procdff$32' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_8340.\\stage1_ff' using process `\\pipe_8340.$proc$verilog_files/pipe_8340.v:8$2'.\n  created $adff cell `$procdff$35' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_8340.$proc$verilog_files/pipe_8340.v:43$16'.\nRemoving empty process `pipe_8340.$proc$verilog_files/pipe_8340.v:36$13'.\nRemoving empty process `pipe_8340.$proc$verilog_files/pipe_8340.v:29$11'.\nRemoving empty process `pipe_8340.$proc$verilog_files/pipe_8340.v:22$8'.\nRemoving empty process `pipe_8340.$proc$verilog_files/pipe_8340.v:15$5'.\nRemoving empty process `pipe_8340.$proc$verilog_files/pipe_8340.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n<suppressed ~6 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n<suppressed ~1 debug messages>\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\nRemoved 9 unused cells and 28 unused wires.\n<suppressed ~15 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_8340...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$35 ($adff) from module pipe_8340.\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.6.9. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.6.12. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.13. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$32 ($adff) from module pipe_8340.\n\n2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.6.15. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.6.16. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.6.19. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.20. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$29 ($adff) from module pipe_8340.\n\n2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.6.22. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.6.23. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.24. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.25. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.6.26. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.27. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$26 ($adff) from module pipe_8340.\n\n2.6.28. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.6.29. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.6.30. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.31. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.32. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.6.33. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.34. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$23 ($adff) from module pipe_8340.\n\n2.6.35. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.6.36. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.6.37. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.38. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.39. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.6.40. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.41. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$20 ($adff) from module pipe_8340.\n\n2.6.42. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.6.43. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n<suppressed ~1 debug messages>\n\n2.6.44. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.45. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.46. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.6.47. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.6.48. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.49. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.6.50. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.6.51. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_8340:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_8340..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_8340.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nNo more expansions possible.\n<suppressed ~73 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_8340' to `<abc-temp-dir>/input.blif'..\nExtracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.\nDon't call ABC as there is nothing to map.\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_8340.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_8340'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_8340..\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_8340'. Setting top module to pipe_8340.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_8340\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_8340\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_8340 ===\n\n   Number of wires:                 14\n   Number of wire bits:             14\n   Number of public wires:          14\n   Number of public wire bits:      14\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  0\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_8340...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_8340 ===\n\n   Number of wires:                 14\n   Number of wire bits:             14\n   Number of public wires:          14\n   Number of public wire bits:      14\n   Number of ports:                  6\n   Number of port bits:              6\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  0\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: a9018a4bb9, CPU: user 0.06s system 0.00s, MEM: 14.03 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 31% 19x opt_expr (0 sec), 20% 19x opt_clean (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 7,
            "gate_counts": {
                "total": 0
            },
            "flip_flops": 7,
            "fan_in": 3,
            "fan_out": 3
        }
    },
    {
        "module": "comb_8245",
        "template": "simple_comb",
        "rtl_code": "module comb_8245(in0, in1, in2, out);\n  input in0, in1, in2;\n  output out;\n  wire w0;\n  wire w1;\n  wire w2;\n  wire w3;\n  wire w4;\n  wire w5;\n  wire w6;\n  and g0(w0, in2, in0);\n  or g1(w1, w0, in2);\n  or g2(w2, w1, in2);\n  or g3(w3, w2, in1);\n  xor g4(w4, w3, in2);\n  or g5(w5, w4, in0);\n  nor g6(w6, w5, in0);\n  assign out = w6;\nendmodule\n",
        "expected_features": {
            "template": "simple_comb",
            "num_inputs": 3,
            "num_gates": 7,
            "expected_ff": 0,
            "expected_comb_depth": 7
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/comb_8245.v\n\n1. Executing Verilog-2005 frontend: verilog_files/comb_8245.v\nParsing Verilog input from `verilog_files/comb_8245.v' to AST representation.\nGenerating RTLIL representation for module `\\comb_8245'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top comb_8245\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\comb_8245\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\comb_8245\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\nRemoved 0 unused cells and 7 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module comb_8245...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8245..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8245.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8245..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8245.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module comb_8245:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8245..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8245.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\comb_8245..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\comb_8245.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $not.\nNo more expansions possible.\n<suppressed ~81 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\comb_8245' to `<abc-temp-dir>/input.blif'..\nExtracted 8 gates and 11 wires to a netlist network with 3 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               AND cells:        1\nABC RESULTS:            ANDNOT cells:        1\nABC RESULTS:                OR cells:        2\nABC RESULTS:              XNOR cells:        1\nABC RESULTS:        internal signals:        7\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module comb_8245.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\comb_8245'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\comb_8245..\nRemoved 0 unused cells and 11 unused wires.\n<suppressed ~7 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `comb_8245'. Setting top module to comb_8245.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\comb_8245\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\comb_8245\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== comb_8245 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           5\n   Number of public wire bits:       5\n   Number of ports:                  4\n   Number of port bits:              4\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_ANDNOT_                       1\n     $_AND_                          1\n     $_OR_                           2\n     $_XNOR_                         1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module comb_8245...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== comb_8245 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           5\n   Number of public wire bits:       5\n   Number of ports:                  4\n   Number of port bits:              4\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  5\n     $_ANDNOT_                       1\n     $_AND_                          1\n     $_OR_                           2\n     $_XNOR_                         1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: c7b94c1969, CPU: user 0.05s system 0.01s, MEM: 15.84 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 49% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 7,
            "gate_counts": {
                "total": 5
            },
            "flip_flops": 0,
            "fan_in": 4,
            "fan_out": 4
        }
    },
    {
        "module": "fanin_9771",
        "template": "high_fanin",
        "rtl_code": "module fanin_9771(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_0_4;\n  or g_0_4(w_0_4, in8, in9);\n  wire w_0_5;\n  or g_0_5(w_0_5, in10, in11);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_1_2;\n  or g_1_2(w_1_2, w_0_4, w_0_5);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, w_1_2);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 12,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_9771.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_9771.v\nParsing Verilog input from `verilog_files/fanin_9771.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_9771'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_9771\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_9771\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_9771\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\nRemoved 0 unused cells and 11 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9771...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9771..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9771.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9771..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9771.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_9771:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9771..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9771.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9771..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9771.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~84 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_9771' to `<abc-temp-dir>/input.blif'..\nExtracted 11 gates and 23 wires to a netlist network with 12 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:       11\nABC RESULTS:        internal signals:       10\nABC RESULTS:           input signals:       12\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9771.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9771'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9771..\nRemoved 0 unused cells and 23 unused wires.\n<suppressed ~11 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_9771'. Setting top module to fanin_9771.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_9771\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_9771\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_9771 ===\n\n   Number of wires:                 24\n   Number of wire bits:             24\n   Number of public wires:          14\n   Number of public wire bits:      14\n   Number of ports:                 13\n   Number of port bits:             13\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 11\n     $_OR_                          11\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9771...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_9771 ===\n\n   Number of wires:                 24\n   Number of wire bits:             24\n   Number of public wires:          14\n   Number of public wire bits:      14\n   Number of ports:                 13\n   Number of port bits:             13\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                 11\n     $_OR_                          11\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 83f840fc52, CPU: user 0.05s system 0.01s, MEM: 14.81 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 11
            },
            "flip_flops": 0,
            "fan_in": 4,
            "fan_out": 2
        }
    },
    {
        "module": "pipe_5590",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_5590(in0, in1, clk, reset, out);\n  input clk, reset;\n  input in0, in1;\n  output out;\n  wire stage0;\n  and g0(stage0, in1, in1);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  or g1(stage1, stage1_ff, in0);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  nand g2(stage2, stage2_ff, in0);\n  assign out = stage2;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 2,
            "num_pipeline_stages": 3,
            "expected_ff": 3,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_5590.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_5590.v\nParsing Verilog input from `verilog_files/pipe_5590.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_5590'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_5590\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_5590\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_5590\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_5590.v:15$4 in module pipe_5590.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_5590.v:8$2 in module pipe_5590.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_5590.$proc$verilog_files/pipe_5590.v:15$4'.\nFound async reset \\reset in `\\pipe_5590.$proc$verilog_files/pipe_5590.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_5590.$proc$verilog_files/pipe_5590.v:15$4'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_5590.$proc$verilog_files/pipe_5590.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_5590.\\stage2_ff' using process `\\pipe_5590.$proc$verilog_files/pipe_5590.v:15$4'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_5590.\\stage1_ff' using process `\\pipe_5590.$proc$verilog_files/pipe_5590.v:8$2'.\n  created $adff cell `$procdff$12' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_5590.$proc$verilog_files/pipe_5590.v:15$4'.\nRemoving empty process `pipe_5590.$proc$verilog_files/pipe_5590.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n<suppressed ~3 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\nRemoved 1 unused cells and 8 unused wires.\n<suppressed ~3 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_5590...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5590..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5590.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5590..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5590.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_5590:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5590..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5590.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_5590..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_5590.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~77 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_5590' to `<abc-temp-dir>/input.blif'..\nExtracted 2 gates and 4 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:              NAND cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_5590.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_5590'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_5590..\nRemoved 0 unused cells and 4 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_5590'. Setting top module to pipe_5590.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_5590\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_5590\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_5590 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NAND_                         1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_5590...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_5590 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_NAND_                         1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: e6cff517a8, CPU: user 0.04s system 0.01s, MEM: 14.78 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 3,
            "fan_in": 2,
            "fan_out": 2
        }
    },
    {
        "module": "multiclk_9843",
        "template": "multi_clock",
        "rtl_code": "module multiclk_9843(in0, in1, in2, in3, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2, in3;\n  output out;\n  wire comb1;\n  xor g0(comb1, in1, in1);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 4,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_9843.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_9843.v\nParsing Verilog input from `verilog_files/multiclk_9843.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_9843'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_9843\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9843\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9843\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9843.v:13$3 in module multiclk_9843.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9843.v:8$2 in module multiclk_9843.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_9843.$proc$verilog_files/multiclk_9843.v:13$3'.\nFound async reset \\reset in `\\multiclk_9843.$proc$verilog_files/multiclk_9843.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_9843.$proc$verilog_files/multiclk_9843.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_9843.$proc$verilog_files/multiclk_9843.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_9843.\\cross_domain' using process `\\multiclk_9843.$proc$verilog_files/multiclk_9843.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_9843.\\reg1' using process `\\multiclk_9843.$proc$verilog_files/multiclk_9843.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_9843.$proc$verilog_files/multiclk_9843.v:13$3'.\nRemoving empty process `multiclk_9843.$proc$verilog_files/multiclk_9843.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n<suppressed ~1 debug messages>\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9843...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9843..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9843.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$9 ($adff) from module multiclk_9843.\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.6.9. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9843..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9843.\nPerformed a total of 0 changes.\n\n2.6.12. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.6.13. Executing OPT_DFF pass (perform DFF optimizations).\nSetting constant 0-bit at position 0 on $procdff$6 ($adff) from module multiclk_9843.\n\n2.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.6.15. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.6.16. Rerunning OPT passes. (Maybe there is more to do..)\n\n2.6.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9843..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9843.\nPerformed a total of 0 changes.\n\n2.6.19. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.6.20. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.21. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.6.22. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.6.23. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9843..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9843.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_9843:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9843..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9843.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9843..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9843.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nNo more expansions possible.\n<suppressed ~73 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_9843' to `<abc-temp-dir>/input.blif'..\nExtracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.\nDon't call ABC as there is nothing to map.\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9843.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9843'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9843..\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_9843'. Setting top module to multiclk_9843.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9843\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9843\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_9843 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  0\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9843...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_9843 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  0\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: 2386bc2a26, CPU: user 0.05s system 0.01s, MEM: 14.95 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 30% 15x opt_expr (0 sec), 21% 3x read_verilog (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 0
            },
            "flip_flops": 2,
            "fan_in": 3,
            "fan_out": 3
        }
    },
    {
        "module": "multiclk_3248",
        "template": "multi_clock",
        "rtl_code": "module multiclk_3248(in0, in1, in2, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2;\n  output out;\n  wire comb1;\n  and g0(comb1, in1, in0);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 3,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_3248.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_3248.v\nParsing Verilog input from `verilog_files/multiclk_3248.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_3248'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_3248\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_3248\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_3248\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_3248.v:13$3 in module multiclk_3248.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_3248.v:8$2 in module multiclk_3248.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_3248.$proc$verilog_files/multiclk_3248.v:13$3'.\nFound async reset \\reset in `\\multiclk_3248.$proc$verilog_files/multiclk_3248.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_3248.$proc$verilog_files/multiclk_3248.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_3248.$proc$verilog_files/multiclk_3248.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_3248.\\cross_domain' using process `\\multiclk_3248.$proc$verilog_files/multiclk_3248.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_3248.\\reg1' using process `\\multiclk_3248.$proc$verilog_files/multiclk_3248.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_3248.$proc$verilog_files/multiclk_3248.v:13$3'.\nRemoving empty process `multiclk_3248.$proc$verilog_files/multiclk_3248.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_3248...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3248..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3248.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3248..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3248.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_3248:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3248..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3248.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_3248..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_3248.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $and.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_3248' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               AND cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_3248.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_3248'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_3248..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_3248'. Setting top module to multiclk_3248.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_3248\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_3248\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_3248 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_AND_                          1\n     $_DFF_PP0_                      2\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_3248...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_3248 ===\n\n   Number of wires:                 10\n   Number of wire bits:             10\n   Number of public wires:          10\n   Number of public wire bits:      10\n   Number of ports:                  7\n   Number of port bits:              7\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_AND_                          1\n     $_DFF_PP0_                      2\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: f7317b3842, CPU: user 0.04s system 0.00s, MEM: 14.17 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 53% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 2,
            "fan_out": 2
        }
    },
    {
        "module": "fanin_9648",
        "template": "high_fanin",
        "rtl_code": "module fanin_9648(in0, in1, in2, in3, in4, in5, in6, in7, in8, out);\n  input in0, in1, in2, in3, in4, in5, in6, in7, in8;\n  output out;\n  wire w_0_0;\n  or g_0_0(w_0_0, in0, in1);\n  wire w_0_1;\n  or g_0_1(w_0_1, in2, in3);\n  wire w_0_2;\n  or g_0_2(w_0_2, in4, in5);\n  wire w_0_3;\n  or g_0_3(w_0_3, in6, in7);\n  wire w_1_0;\n  or g_1_0(w_1_0, w_0_0, w_0_1);\n  wire w_1_1;\n  or g_1_1(w_1_1, w_0_2, w_0_3);\n  wire w_2_0;\n  or g_2_0(w_2_0, w_1_0, w_1_1);\n  wire w_3_0;\n  or g_3_0(w_3_0, w_2_0, in8);\n  assign out = w_3_0;\nendmodule\n",
        "expected_features": {
            "template": "high_fanin",
            "num_inputs": 9,
            "expected_ff": 0,
            "or_tree_levels": 4,
            "expected_comb_depth": 4
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/fanin_9648.v\n\n1. Executing Verilog-2005 frontend: verilog_files/fanin_9648.v\nParsing Verilog input from `verilog_files/fanin_9648.v' to AST representation.\nGenerating RTLIL representation for module `\\fanin_9648'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top fanin_9648\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\fanin_9648\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\fanin_9648\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 0 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\nRemoved 0 unused cells and 8 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9648...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9648..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9648.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9648..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9648.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module fanin_9648:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9648..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9648.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\fanin_9648..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\fanin_9648.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $or.\nNo more expansions possible.\n<suppressed ~81 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\fanin_9648' to `<abc-temp-dir>/input.blif'..\nExtracted 8 gates and 17 wires to a netlist network with 9 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:                OR cells:        8\nABC RESULTS:        internal signals:        7\nABC RESULTS:           input signals:        9\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module fanin_9648.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\fanin_9648'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\fanin_9648..\nRemoved 0 unused cells and 17 unused wires.\n<suppressed ~8 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `fanin_9648'. Setting top module to fanin_9648.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\fanin_9648\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\fanin_9648\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== fanin_9648 ===\n\n   Number of wires:                 18\n   Number of wire bits:             18\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                 10\n   Number of port bits:             10\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_OR_                           8\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module fanin_9648...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== fanin_9648 ===\n\n   Number of wires:                 18\n   Number of wire bits:             18\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                 10\n   Number of port bits:             10\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  8\n     $_OR_                           8\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: df83d7d979, CPU: user 0.05s system 0.01s, MEM: 14.91 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 4,
            "gate_counts": {
                "total": 8
            },
            "flip_flops": 0,
            "fan_in": 2,
            "fan_out": 2
        }
    },
    {
        "module": "pipe_2803",
        "template": "deep_pipeline",
        "rtl_code": "module pipe_2803(in0, in1, clk, reset, out);\n  input clk, reset;\n  input in0, in1;\n  output out;\n  wire stage0;\n  xor g0(stage0, in0, in1);\n  reg stage1_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage1_ff <= 0;\n    else stage1_ff <= stage0;\n  end\n  wire stage1;\n  or g1(stage1, stage1_ff, in1);\n  reg stage2_ff;\n  always @(posedge clk or posedge reset) begin\n    if (reset) stage2_ff <= 0;\n    else stage2_ff <= stage1_ff;\n  end\n  wire stage2;\n  nor g2(stage2, stage2_ff, in1);\n  assign out = stage2;\nendmodule\n",
        "expected_features": {
            "template": "deep_pipeline",
            "num_inputs": 2,
            "num_pipeline_stages": 3,
            "expected_ff": 3,
            "expected_comb_depth": 3
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/pipe_2803.v\n\n1. Executing Verilog-2005 frontend: verilog_files/pipe_2803.v\nParsing Verilog input from `verilog_files/pipe_2803.v' to AST representation.\nGenerating RTLIL representation for module `\\pipe_2803'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top pipe_2803\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\pipe_2803\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\pipe_2803\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2803.v:15$4 in module pipe_2803.\nMarked 1 switch rules as full_case in process $proc$verilog_files/pipe_2803.v:8$2 in module pipe_2803.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\pipe_2803.$proc$verilog_files/pipe_2803.v:15$4'.\nFound async reset \\reset in `\\pipe_2803.$proc$verilog_files/pipe_2803.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\pipe_2803.$proc$verilog_files/pipe_2803.v:15$4'.\n     1/1: $0\\stage2_ff[0:0]\nCreating decoders for process `\\pipe_2803.$proc$verilog_files/pipe_2803.v:8$2'.\n     1/1: $0\\stage1_ff[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\pipe_2803.\\stage2_ff' using process `\\pipe_2803.$proc$verilog_files/pipe_2803.v:15$4'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\nCreating register for signal `\\pipe_2803.\\stage1_ff' using process `\\pipe_2803.$proc$verilog_files/pipe_2803.v:8$2'.\n  created $adff cell `$procdff$12' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `pipe_2803.$proc$verilog_files/pipe_2803.v:15$4'.\nRemoving empty process `pipe_2803.$proc$verilog_files/pipe_2803.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\nRemoved 1 unused cells and 8 unused wires.\n<suppressed ~3 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_2803...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2803..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2803.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2803..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2803.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module pipe_2803:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2803..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2803.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\pipe_2803..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\pipe_2803.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $or.\nUsing extmapper simplemap for cells of type $not.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~78 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\pipe_2803' to `<abc-temp-dir>/input.blif'..\nExtracted 3 gates and 6 wires to a netlist network with 3 inputs and 2 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               NOR cells:        1\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        1\nABC RESULTS:           input signals:        3\nABC RESULTS:          output signals:        2\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module pipe_2803.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\pipe_2803'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\pipe_2803..\nRemoved 0 unused cells and 6 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `pipe_2803'. Setting top module to pipe_2803.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\pipe_2803\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\pipe_2803\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== pipe_2803 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  4\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module pipe_2803...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== pipe_2803 ===\n\n   Number of wires:                  9\n   Number of wire bits:              9\n   Number of public wires:           9\n   Number of public wire bits:       9\n   Number of ports:                  5\n   Number of port bits:              5\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  4\n     $_DFF_PP0_                      2\n     $_NOR_                          1\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: fbc2f7563a, CPU: user 0.04s system 0.01s, MEM: 14.97 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 52% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 3,
            "gate_counts": {
                "total": 4
            },
            "flip_flops": 3,
            "fan_in": 2,
            "fan_out": 1
        }
    },
    {
        "module": "multiclk_9687",
        "template": "multi_clock",
        "rtl_code": "module multiclk_9687(in0, in1, in2, in3, clk1, clk2, reset, out);\n  input clk1, clk2, reset;\n  input in0, in1, in2, in3;\n  output out;\n  wire comb1;\n  xor g0(comb1, in3, in1);\n  reg reg1;\n  always @(posedge clk1 or posedge reset) begin\n    if (reset) reg1 <= 0;\n    else reg1 <= comb1;\n  end\n  reg cross_domain;\n  always @(posedge clk2 or posedge reset) begin\n    if (reset) cross_domain <= 0;\n    else cross_domain <= reg1;\n  end\n  assign out = cross_domain;\nendmodule\n",
        "expected_features": {
            "template": "multi_clock",
            "num_inputs": 4,
            "expected_ff": 2,
            "clock_domains": 2,
            "expected_comb_depth": 1
        },
        "synthesis_report": "\n /----------------------------------------------------------------------------\\\n |  yosys -- Yosys Open SYnthesis Suite                                       |\n |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |\n |  Distributed under an ISC-like license, type \"license\" to see terms        |\n \\----------------------------------------------------------------------------/\n Yosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\n\nyosys> \n\nyosys>     read_verilog verilog_files/multiclk_9687.v\n\n1. Executing Verilog-2005 frontend: verilog_files/multiclk_9687.v\nParsing Verilog input from `verilog_files/multiclk_9687.v' to AST representation.\nGenerating RTLIL representation for module `\\multiclk_9687'.\nSuccessfully finished Verilog frontend.\n\nyosys>     synth -top multiclk_9687\n\n2. Executing SYNTH pass.\n\n2.1. Executing HIERARCHY pass (managing design hierarchy).\n\n2.1.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9687\n\n2.1.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9687\nRemoved 0 unused modules.\n\n2.2. Executing PROC pass (convert processes to netlists).\n\n2.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nCleaned up 0 empty switches.\n\n2.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9687.v:13$3 in module multiclk_9687.\nMarked 1 switch rules as full_case in process $proc$verilog_files/multiclk_9687.v:8$2 in module multiclk_9687.\nRemoved a total of 0 dead cases.\n\n2.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).\nRemoved 2 redundant assignments.\nPromoted 0 assignments to connections.\n\n2.2.4. Executing PROC_INIT pass (extract init attributes).\n\n2.2.5. Executing PROC_ARST pass (detect async resets in processes).\nFound async reset \\reset in `\\multiclk_9687.$proc$verilog_files/multiclk_9687.v:13$3'.\nFound async reset \\reset in `\\multiclk_9687.$proc$verilog_files/multiclk_9687.v:8$2'.\n\n2.2.6. Executing PROC_ROM pass (convert switches to ROMs).\nConverted 0 switches.\n\n2.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).\nCreating decoders for process `\\multiclk_9687.$proc$verilog_files/multiclk_9687.v:13$3'.\n     1/1: $0\\cross_domain[0:0]\nCreating decoders for process `\\multiclk_9687.$proc$verilog_files/multiclk_9687.v:8$2'.\n     1/1: $0\\reg1[0:0]\n\n2.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).\n\n2.2.9. Executing PROC_DFF pass (convert process syncs to FFs).\nCreating register for signal `\\multiclk_9687.\\cross_domain' using process `\\multiclk_9687.$proc$verilog_files/multiclk_9687.v:13$3'.\n  created $adff cell `$procdff$6' with positive edge clock and positive level reset.\nCreating register for signal `\\multiclk_9687.\\reg1' using process `\\multiclk_9687.$proc$verilog_files/multiclk_9687.v:8$2'.\n  created $adff cell `$procdff$9' with positive edge clock and positive level reset.\n\n2.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).\n\n2.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).\nRemoving empty process `multiclk_9687.$proc$verilog_files/multiclk_9687.v:13$3'.\nRemoving empty process `multiclk_9687.$proc$verilog_files/multiclk_9687.v:8$2'.\nCleaned up 0 empty switches.\n\n2.2.12. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n<suppressed ~2 debug messages>\n\n2.3. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\nRemoved 0 unused cells and 5 unused wires.\n<suppressed ~1 debug messages>\n\n2.5. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9687...\nFound and reported 0 problems.\n\n2.6. Executing OPT pass (performing simple optimizations).\n\n2.6.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.6.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9687..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9687.\nPerformed a total of 0 changes.\n\n2.6.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.6.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.6.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.6.9. Finished OPT passes. (There is nothing left to do.)\n\n2.7. Executing FSM pass (extract and optimize FSM).\n\n2.7.1. Executing FSM_DETECT pass (finding FSMs in design).\n\n2.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).\n\n2.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).\n\n2.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).\n\n2.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).\n\n2.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).\n\n2.8. Executing OPT pass (performing simple optimizations).\n\n2.8.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.8.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9687..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9687.\nPerformed a total of 0 changes.\n\n2.8.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.8.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.8.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.8.9. Finished OPT passes. (There is nothing left to do.)\n\n2.9. Executing WREDUCE pass (reducing word size of cells).\n\n2.10. Executing PEEPOPT pass (run peephole optimizers).\n\n2.11. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.12. Executing ALUMACC pass (create $alu and $macc cells).\nExtracting $alu and $macc cells in module multiclk_9687:\n  created 0 $alu and 0 $macc cells.\n\n2.13. Executing SHARE pass (SAT-based resource sharing).\n\n2.14. Executing OPT pass (performing simple optimizations).\n\n2.14.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.14.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9687..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9687.\nPerformed a total of 0 changes.\n\n2.14.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.14.6. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.14.8. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.14.9. Finished OPT passes. (There is nothing left to do.)\n\n2.15. Executing MEMORY pass.\n\n2.15.1. Executing OPT_MEM pass (optimize memories).\nPerformed a total of 0 transformations.\n\n2.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).\nPerformed a total of 0 transformations.\n\n2.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).\n\n2.15.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).\n\n2.15.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).\n\n2.15.6. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.15.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).\n\n2.15.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).\nPerformed a total of 0 transformations.\n\n2.15.9. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.15.10. Executing MEMORY_COLLECT pass (generating $mem cells).\n\n2.16. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.17. Executing OPT pass (performing simple optimizations).\n\n2.17.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.17.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.17.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.17.5. Finished fast OPT passes.\n\n2.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).\n\n2.19. Executing OPT pass (performing simple optimizations).\n\n2.19.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.19.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).\nRunning muxtree optimizer on module \\multiclk_9687..\n  Creating internal representation of mux trees.\n  No muxes found in this module.\nRemoved 0 multiplexer ports.\n\n2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).\n  Optimizing cells in module \\multiclk_9687.\nPerformed a total of 0 changes.\n\n2.19.5. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.19.6. Executing OPT_SHARE pass.\n\n2.19.7. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.19.9. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.19.10. Finished OPT passes. (There is nothing left to do.)\n\n2.20. Executing TECHMAP pass (map to technology primitives).\n\n2.20.1. Executing Verilog-2005 frontend: /opt/homebrew/bin/../share/yosys/techmap.v\nParsing Verilog input from `/opt/homebrew/bin/../share/yosys/techmap.v' to AST representation.\nGenerating RTLIL representation for module `\\_90_simplemap_bool_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_reduce_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_logic_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_compare_ops'.\nGenerating RTLIL representation for module `\\_90_simplemap_various'.\nGenerating RTLIL representation for module `\\_90_simplemap_registers'.\nGenerating RTLIL representation for module `\\_90_shift_ops_shr_shl_sshl_sshr'.\nGenerating RTLIL representation for module `\\_90_shift_shiftx'.\nGenerating RTLIL representation for module `\\_90_fa'.\nGenerating RTLIL representation for module `\\_90_lcu_brent_kung'.\nGenerating RTLIL representation for module `\\_90_alu'.\nGenerating RTLIL representation for module `\\_90_macc'.\nGenerating RTLIL representation for module `\\_90_alumacc'.\nGenerating RTLIL representation for module `\\$__div_mod_u'.\nGenerating RTLIL representation for module `\\$__div_mod_trunc'.\nGenerating RTLIL representation for module `\\_90_div'.\nGenerating RTLIL representation for module `\\_90_mod'.\nGenerating RTLIL representation for module `\\$__div_mod_floor'.\nGenerating RTLIL representation for module `\\_90_divfloor'.\nGenerating RTLIL representation for module `\\_90_modfloor'.\nGenerating RTLIL representation for module `\\_90_pow'.\nGenerating RTLIL representation for module `\\_90_pmux'.\nGenerating RTLIL representation for module `\\_90_demux'.\nGenerating RTLIL representation for module `\\_90_lut'.\nSuccessfully finished Verilog frontend.\n\n2.20.2. Continuing TECHMAP pass.\nUsing extmapper simplemap for cells of type $xor.\nUsing extmapper simplemap for cells of type $adff.\nNo more expansions possible.\n<suppressed ~76 debug messages>\n\n2.21. Executing OPT pass (performing simple optimizations).\n\n2.21.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.21.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.21.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\n\n2.21.5. Finished fast OPT passes.\n\n2.22. Executing ABC pass (technology mapping using ABC).\n\n2.22.1. Extracting gate netlist of module `\\multiclk_9687' to `<abc-temp-dir>/input.blif'..\nExtracted 1 gates and 3 wires to a netlist network with 2 inputs and 1 outputs.\n\n2.22.1.1. Executing ABC.\nRunning ABC command: \"<yosys-exe-dir>/yosys-abc\" -s -f <abc-temp-dir>/abc.script 2>&1\nABC: ABC command line: \"source <abc-temp-dir>/abc.script\".\nABC: \nABC: + read_blif <abc-temp-dir>/input.blif \nABC: + read_library <abc-temp-dir>/stdcells.genlib \nABC: Entered genlib library with 13 gates from file \"<abc-temp-dir>/stdcells.genlib\".\nABC: + strash \nABC: + dretime \nABC: + map \nABC: + write_blif <abc-temp-dir>/output.blif \n\n2.22.1.2. Re-integrating ABC results.\nABC RESULTS:               XOR cells:        1\nABC RESULTS:        internal signals:        0\nABC RESULTS:           input signals:        2\nABC RESULTS:          output signals:        1\nRemoving temp directory.\n\n2.23. Executing OPT pass (performing simple optimizations).\n\n2.23.1. Executing OPT_EXPR pass (perform const folding).\nOptimizing module multiclk_9687.\n\n2.23.2. Executing OPT_MERGE pass (detect identical cells).\nFinding identical cells in module `\\multiclk_9687'.\nRemoved a total of 0 cells.\n\n2.23.3. Executing OPT_DFF pass (perform DFF optimizations).\n\n2.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).\nFinding unused cells or wires in module \\multiclk_9687..\nRemoved 0 unused cells and 3 unused wires.\n<suppressed ~1 debug messages>\n\n2.23.5. Finished fast OPT passes.\n\n2.24. Executing HIERARCHY pass (managing design hierarchy).\nAttribute `top' found on module `multiclk_9687'. Setting top module to multiclk_9687.\n\n2.24.1. Analyzing design hierarchy..\nTop module:  \\multiclk_9687\n\n2.24.2. Analyzing design hierarchy..\nTop module:  \\multiclk_9687\nRemoved 0 unused modules.\n\n2.25. Printing statistics.\n\n=== multiclk_9687 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_XOR_                          1\n\n2.26. Executing CHECK pass (checking for obvious problems).\nChecking module multiclk_9687...\nFound and reported 0 problems.\n\nyosys>     stat\n\n3. Printing statistics.\n\n=== multiclk_9687 ===\n\n   Number of wires:                 11\n   Number of wire bits:             11\n   Number of public wires:          11\n   Number of public wire bits:      11\n   Number of ports:                  8\n   Number of port bits:              8\n   Number of memories:               0\n   Number of memory bits:            0\n   Number of processes:              0\n   Number of cells:                  3\n     $_DFF_PP0_                      2\n     $_XOR_                          1\n\n\nyosys>     \n\nyosys> exit\nEnd of script. Logfile hash: be962ed47d, CPU: user 0.04s system 0.00s, MEM: 14.50 MB peak\nYosys 0.50 (git sha1 b5170e1394f602c607e75bdbb1a2b637118f2086, clang++ 16.0.0 -fPIC -O3)\nTime spent: 54% 1x abc (0 sec), 13% 13x opt_expr (0 sec), ...\n",
        "extracted_features": {
            "combinational_depth": 1,
            "gate_counts": {
                "total": 3
            },
            "flip_flops": 2,
            "fan_in": 2,
            "fan_out": 1
        }
    }
]