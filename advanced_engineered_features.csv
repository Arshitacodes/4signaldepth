module,template,rtl_code,template,num_inputs,num_gates,expected_ff,expected_comb_depth,num_pipeline_stages,clock_domains,or_tree_levels,combinational_depth,flip_flops,fan_in,fan_out,total_gate_count,fan_in_out_ratio,logic_complexity_ratio,pipeline_stage_count,used_comb_depth,estimated_delay,ff_to_gate_ratio,delay_to_fanout_ratio,fan_in_fan_out_product,weighted_complexity
comb_3530,simple_comb,"module comb_3530(in0, in1, in2, in3, in4, out);
  input in0, in1, in2, in3, in4;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  nand g0(w0, in2, in0);
  nand g1(w1, w0, in3);
  or g2(w2, w1, in4);
  nand g3(w3, w2, in1);
  assign out = w3;
endmodule
",simple_comb,5,4.0,0,4,,,,4,0,3,4,4,0.75,4.0,1.0,4,4.5,0.0,1.125,12,18.0
pipe_3380,deep_pipeline,"module pipe_3380(in0, in1, in2, in3, clk, reset, out);
  input clk, reset;
  input in0, in1, in2, in3;
  output out;
  wire stage0;
  and g0(stage0, in0, in1);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  xor g1(stage1, stage1_ff, in2);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  or g2(stage2, stage2_ff, in0);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  and g3(stage3, stage3_ff, in0);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  nor g4(stage4, stage4_ff, in2);
  assign out = stage4;
endmodule
",deep_pipeline,4,,5,5,5.0,,,5,5,1,3,6,0.3333333333333333,1.2,5.0,5,7.5,0.8333333333333334,2.5,3,9.0
multiclk_8093,multi_clock,"module multiclk_8093(in0, in1, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1;
  output out;
  wire comb1;
  xor g0(comb1, in0, in0);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,2,,2,1,,2.0,,1,2,4,1,0,4.0,0.0,1.0,1,1.5,,1.5,4,0.0
fanin_8225,high_fanin,"module fanin_8225(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_0_5;
  or g_0_5(w_0_5, in10, in11);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_1_2;
  or g_1_2(w_1_2, w_0_4, w_0_5);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_1_2);
  assign out = w_3_0;
endmodule
",high_fanin,12,,0,4,,,4.0,4,0,3,4,11,0.75,11.0,1.0,4,4.5,0.0,1.125,12,49.5
multiclk_6608,multi_clock,"module multiclk_6608(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  and g0(comb1, in2, in0);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,3,4,3,0.75,1.5,1.0,1,1.5,0.6666666666666666,0.375,12,2.25
pipe_7129,deep_pipeline,"module pipe_7129(in0, in1, in2, clk, reset, out);
  input clk, reset;
  input in0, in1, in2;
  output out;
  wire stage0;
  nand g0(stage0, in0, in2);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  or g1(stage1, stage1_ff, in1);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  nor g2(stage2, stage2_ff, in1);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  nor g3(stage3, stage3_ff, in0);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  or g4(stage4, stage4_ff, in2);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  xor g5(stage5, stage5_ff, in1);
  reg stage6_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage6_ff <= 0;
    else stage6_ff <= stage5_ff;
  end
  wire stage6;
  nand g6(stage6, stage6_ff, in2);
  assign out = stage6;
endmodule
",deep_pipeline,3,,7,7,7.0,,,7,7,2,4,8,0.5,1.1428571428571428,7.0,7,10.5,0.875,2.625,8,12.0
pipe_5298,deep_pipeline,"module pipe_5298(in0, in1, in2, in3, clk, reset, out);
  input clk, reset;
  input in0, in1, in2, in3;
  output out;
  wire stage0;
  nand g0(stage0, in2, in1);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  nand g1(stage1, stage1_ff, in0);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  nand g2(stage2, stage2_ff, in2);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  or g3(stage3, stage3_ff, in2);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  xor g4(stage4, stage4_ff, in3);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  nor g5(stage5, stage5_ff, in1);
  assign out = stage5;
endmodule
",deep_pipeline,4,,6,6,6.0,,,6,6,2,1,7,2.0,1.1666666666666667,6.0,6,9.0,0.8571428571428571,9.0,2,10.5
pipe_5012,deep_pipeline,"module pipe_5012(in0, in1, in2, in3, clk, reset, out);
  input clk, reset;
  input in0, in1, in2, in3;
  output out;
  wire stage0;
  and g0(stage0, in3, in2);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  nor g1(stage1, stage1_ff, in2);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  or g2(stage2, stage2_ff, in1);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  and g3(stage3, stage3_ff, in1);
  assign out = stage3;
endmodule
",deep_pipeline,4,,4,4,4.0,,,4,4,2,4,5,0.5,1.25,4.0,4,6.0,0.8,1.5,8,7.5
pipe_7792,deep_pipeline,"module pipe_7792(in0, in1, in2, clk, reset, out);
  input clk, reset;
  input in0, in1, in2;
  output out;
  wire stage0;
  nand g0(stage0, in2, in0);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  nor g1(stage1, stage1_ff, in2);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  nor g2(stage2, stage2_ff, in2);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  nor g3(stage3, stage3_ff, in2);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  xor g4(stage4, stage4_ff, in1);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  and g5(stage5, stage5_ff, in1);
  reg stage6_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage6_ff <= 0;
    else stage6_ff <= stage5_ff;
  end
  wire stage6;
  and g6(stage6, stage6_ff, in0);
  assign out = stage6;
endmodule
",deep_pipeline,3,,7,7,7.0,,,7,7,3,2,8,1.5,1.1428571428571428,7.0,7,10.5,0.875,5.25,6,12.0
multiclk_9328,multi_clock,"module multiclk_9328(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  nand g0(comb1, in1, in1);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,4,4,3,1.0,1.5,1.0,1,1.5,0.6666666666666666,0.375,16,2.25
comb_1381,simple_comb,"module comb_1381(in0, in1, in2, in3, out);
  input in0, in1, in2, in3;
  output out;
  wire w0;
  wire w1;
  wire w2;
  nor g0(w0, in2, in2);
  nand g1(w1, w0, in2);
  and g2(w2, w1, in0);
  assign out = w2;
endmodule
",simple_comb,4,3.0,0,3,,,,3,0,2,1,0,2.0,0.0,1.0,3,3.5,,3.5,2,0.0
multiclk_6233,multi_clock,"module multiclk_6233(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  nor g0(comb1, in1, in2);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,1,1,3,1.0,1.5,1.0,1,1.5,0.6666666666666666,1.5,1,2.25
multiclk_2592,multi_clock,"module multiclk_2592(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  or g0(comb1, in0, in2);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,3,3,3,1.0,1.5,1.0,1,1.5,0.6666666666666666,0.5,9,2.25
comb_1089,simple_comb,"module comb_1089(in0, in1, out);
  input in0, in1;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  wire w4;
  wire w5;
  wire w6;
  wire w7;
  or g0(w0, in0, in0);
  nor g1(w1, w0, in1);
  xor g2(w2, w1, in1);
  or g3(w3, w2, in1);
  and g4(w4, w3, in1);
  or g5(w5, w4, in0);
  xor g6(w6, w5, in0);
  nor g7(w7, w6, in1);
  assign out = w7;
endmodule
",simple_comb,2,8.0,0,8,,,,8,0,1,3,2,0.3333333333333333,2.0,1.0,8,8.5,0.0,2.8333333333333335,3,17.0
multiclk_3574,multi_clock,"module multiclk_3574(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  or g0(comb1, in0, in0);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,2,2,2,1.0,1.0,1.0,1,1.5,1.0,0.75,4,1.5
pipe_3171,deep_pipeline,"module pipe_3171(in0, in1, in2, in3, clk, reset, out);
  input clk, reset;
  input in0, in1, in2, in3;
  output out;
  wire stage0;
  xor g0(stage0, in1, in2);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  nand g1(stage1, stage1_ff, in1);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  nand g2(stage2, stage2_ff, in3);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  and g3(stage3, stage3_ff, in3);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  and g4(stage4, stage4_ff, in2);
  assign out = stage4;
endmodule
",deep_pipeline,4,,5,5,5.0,,,5,5,3,4,6,0.75,1.2,5.0,5,7.5,0.8333333333333334,1.875,12,9.0
multiclk_7732,multi_clock,"module multiclk_7732(in0, in1, in2, in3, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2, in3;
  output out;
  wire comb1;
  nand g0(comb1, in0, in1);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,4,,2,1,,2.0,,1,2,1,1,3,1.0,1.5,1.0,1,1.5,0.6666666666666666,1.5,1,2.25
pipe_4030,deep_pipeline,"module pipe_4030(in0, in1, in2, clk, reset, out);
  input clk, reset;
  input in0, in1, in2;
  output out;
  wire stage0;
  xor g0(stage0, in1, in2);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  and g1(stage1, stage1_ff, in1);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  nand g2(stage2, stage2_ff, in2);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  or g3(stage3, stage3_ff, in1);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  and g4(stage4, stage4_ff, in2);
  assign out = stage4;
endmodule
",deep_pipeline,3,,5,5,5.0,,,5,5,1,4,6,0.25,1.2,5.0,5,7.5,0.8333333333333334,1.875,4,9.0
multiclk_5197,multi_clock,"module multiclk_5197(in0, in1, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1;
  output out;
  wire comb1;
  xor g0(comb1, in1, in0);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,2,,2,1,,2.0,,1,2,4,2,3,2.0,1.5,1.0,1,1.5,0.6666666666666666,0.75,8,2.25
multiclk_1104,multi_clock,"module multiclk_1104(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  and g0(comb1, in0, in2);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,1,1,3,1.0,1.5,1.0,1,1.5,0.6666666666666666,1.5,1,2.25
comb_6276,simple_comb,"module comb_6276(in0, in1, in2, in3, in4, out);
  input in0, in1, in2, in3, in4;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  wire w4;
  wire w5;
  and g0(w0, in2, in3);
  or g1(w1, w0, in2);
  nor g2(w2, w1, in1);
  and g3(w3, w2, in1);
  xor g4(w4, w3, in2);
  xor g5(w5, w4, in4);
  assign out = w5;
endmodule
",simple_comb,5,6.0,0,6,,,,6,0,1,2,6,0.5,6.0,1.0,6,6.5,0.0,3.25,2,39.0
multiclk_1518,multi_clock,"module multiclk_1518(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  or g0(comb1, in2, in0);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,3,2,3,1.5,1.5,1.0,1,1.5,0.6666666666666666,0.75,6,2.25
comb_3049,simple_comb,"module comb_3049(in0, in1, out);
  input in0, in1;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  wire w4;
  and g0(w0, in0, in0);
  nor g1(w1, w0, in1);
  and g2(w2, w1, in0);
  or g3(w3, w2, in0);
  nand g4(w4, w3, in1);
  assign out = w4;
endmodule
",simple_comb,2,5.0,0,5,,,,5,0,1,4,1,0.25,1.0,1.0,5,5.5,0.0,1.375,4,5.5
fanin_3999,high_fanin,"module fanin_3999(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_0_5;
  or g_0_5(w_0_5, in10, in11);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_1_2;
  or g_1_2(w_1_2, w_0_4, w_0_5);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_1_2);
  assign out = w_3_0;
endmodule
",high_fanin,12,,0,4,,,4.0,4,0,2,4,11,0.5,11.0,1.0,4,4.5,0.0,1.125,8,49.5
comb_3828,simple_comb,"module comb_3828(in0, in1, out);
  input in0, in1;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  wire w4;
  nand g0(w0, in0, in1);
  nand g1(w1, w0, in0);
  nor g2(w2, w1, in1);
  nor g3(w3, w2, in0);
  or g4(w4, w3, in0);
  assign out = w4;
endmodule
",simple_comb,2,5.0,0,5,,,,5,0,3,2,2,1.5,2.0,1.0,5,5.5,0.0,2.75,6,11.0
fanin_5408,high_fanin,"module fanin_5408(in0, in1, in2, in3, in4, in5, in6, in7, in8, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, in8);
  assign out = w_3_0;
endmodule
",high_fanin,9,,0,4,,,4.0,4,0,2,3,8,0.6666666666666666,8.0,1.0,4,4.5,0.0,1.5,6,36.0
pipe_4098,deep_pipeline,"module pipe_4098(in0, in1, in2, clk, reset, out);
  input clk, reset;
  input in0, in1, in2;
  output out;
  wire stage0;
  xor g0(stage0, in2, in2);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  or g1(stage1, stage1_ff, in0);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  and g2(stage2, stage2_ff, in1);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  and g3(stage3, stage3_ff, in2);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  xor g4(stage4, stage4_ff, in0);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  xor g5(stage5, stage5_ff, in2);
  reg stage6_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage6_ff <= 0;
    else stage6_ff <= stage5_ff;
  end
  wire stage6;
  or g6(stage6, stage6_ff, in1);
  assign out = stage6;
endmodule
",deep_pipeline,3,,7,7,7.0,,,7,7,4,1,0,4.0,0.0,7.0,7,10.5,,10.5,4,0.0
comb_6507,simple_comb,"module comb_6507(in0, in1, in2, out);
  input in0, in1, in2;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  wire w4;
  nand g0(w0, in1, in1);
  nor g1(w1, w0, in2);
  nand g2(w2, w1, in1);
  xor g3(w3, w2, in2);
  nor g4(w4, w3, in1);
  assign out = w4;
endmodule
",simple_comb,3,5.0,0,5,,,,5,0,2,1,1,2.0,1.0,1.0,5,5.5,0.0,5.5,2,5.5
multiclk_6098,multi_clock,"module multiclk_6098(in0, in1, in2, in3, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2, in3;
  output out;
  wire comb1;
  or g0(comb1, in3, in1);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,4,,2,1,,2.0,,1,2,2,4,3,0.5,1.5,1.0,1,1.5,0.6666666666666666,0.375,8,2.25
pipe_2055,deep_pipeline,"module pipe_2055(in0, in1, in2, clk, reset, out);
  input clk, reset;
  input in0, in1, in2;
  output out;
  wire stage0;
  and g0(stage0, in0, in2);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  xor g1(stage1, stage1_ff, in2);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  nor g2(stage2, stage2_ff, in2);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  or g3(stage3, stage3_ff, in2);
  assign out = stage3;
endmodule
",deep_pipeline,3,,4,4,4.0,,,4,4,4,1,5,4.0,1.25,4.0,4,6.0,0.8,6.0,4,7.5
comb_9010,simple_comb,"module comb_9010(in0, in1, in2, out);
  input in0, in1, in2;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  nand g0(w0, in1, in1);
  and g1(w1, w0, in2);
  nand g2(w2, w1, in1);
  xor g3(w3, w2, in0);
  assign out = w3;
endmodule
",simple_comb,3,4.0,0,4,,,,4,0,1,4,3,0.25,3.0,1.0,4,4.5,0.0,1.125,4,13.5
fanin_9003,high_fanin,"module fanin_9003(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_0_5;
  or g_0_5(w_0_5, in10, in11);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_1_2;
  or g_1_2(w_1_2, w_0_4, w_0_5);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_2_1;
  or g_2_1(w_2_1, w_1_2, in12);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_2_1);
  assign out = w_3_0;
endmodule
",high_fanin,13,,0,4,,,4.0,4,0,4,1,12,4.0,12.0,1.0,4,4.5,0.0,4.5,4,54.0
comb_1564,simple_comb,"module comb_1564(in0, in1, in2, out);
  input in0, in1, in2;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  wire w4;
  wire w5;
  wire w6;
  wire w7;
  and g0(w0, in2, in1);
  xor g1(w1, w0, in0);
  or g2(w2, w1, in1);
  and g3(w3, w2, in2);
  nand g4(w4, w3, in1);
  xor g5(w5, w4, in2);
  nor g6(w6, w5, in1);
  nor g7(w7, w6, in0);
  assign out = w7;
endmodule
",simple_comb,3,8.0,0,8,,,,8,0,2,2,2,1.0,2.0,1.0,8,8.5,0.0,4.25,4,17.0
multiclk_3062,multi_clock,"module multiclk_3062(in0, in1, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1;
  output out;
  wire comb1;
  and g0(comb1, in0, in1);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,2,,2,1,,2.0,,1,2,1,1,3,1.0,1.5,1.0,1,1.5,0.6666666666666666,1.5,1,2.25
pipe_5421,deep_pipeline,"module pipe_5421(in0, in1, in2, in3, clk, reset, out);
  input clk, reset;
  input in0, in1, in2, in3;
  output out;
  wire stage0;
  nand g0(stage0, in0, in2);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  xor g1(stage1, stage1_ff, in2);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  and g2(stage2, stage2_ff, in0);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  or g3(stage3, stage3_ff, in3);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  or g4(stage4, stage4_ff, in1);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  nor g5(stage5, stage5_ff, in2);
  reg stage6_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage6_ff <= 0;
    else stage6_ff <= stage5_ff;
  end
  wire stage6;
  xor g6(stage6, stage6_ff, in1);
  assign out = stage6;
endmodule
",deep_pipeline,4,,7,7,7.0,,,7,7,1,4,8,0.25,1.1428571428571428,7.0,7,10.5,0.875,2.625,4,12.0
pipe_6754,deep_pipeline,"module pipe_6754(in0, in1, clk, reset, out);
  input clk, reset;
  input in0, in1;
  output out;
  wire stage0;
  nand g0(stage0, in1, in1);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  and g1(stage1, stage1_ff, in1);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  or g2(stage2, stage2_ff, in0);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  and g3(stage3, stage3_ff, in1);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  nor g4(stage4, stage4_ff, in1);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  or g5(stage5, stage5_ff, in0);
  reg stage6_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage6_ff <= 0;
    else stage6_ff <= stage5_ff;
  end
  wire stage6;
  and g6(stage6, stage6_ff, in1);
  assign out = stage6;
endmodule
",deep_pipeline,2,,7,7,7.0,,,7,7,1,1,8,1.0,1.1428571428571428,7.0,7,10.5,0.875,10.5,1,12.0
fanin_7037,high_fanin,"module fanin_7037(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_0_5;
  or g_0_5(w_0_5, in10, in11);
  wire w_0_6;
  or g_0_6(w_0_6, in12, in13);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_1_2;
  or g_1_2(w_1_2, w_0_4, w_0_5);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_2_1;
  or g_2_1(w_2_1, w_1_2, w_0_6);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_2_1);
  assign out = w_3_0;
endmodule
",high_fanin,14,,0,4,,,4.0,4,0,1,1,13,1.0,13.0,1.0,4,4.5,0.0,4.5,1,58.5
fanin_5893,high_fanin,"module fanin_5893(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_0_5;
  or g_0_5(w_0_5, in10, in11);
  wire w_0_6;
  or g_0_6(w_0_6, in12, in13);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_1_2;
  or g_1_2(w_1_2, w_0_4, w_0_5);
  wire w_1_3;
  or g_1_3(w_1_3, w_0_6, in14);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_2_1;
  or g_2_1(w_2_1, w_1_2, w_1_3);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_2_1);
  assign out = w_3_0;
endmodule
",high_fanin,15,,0,4,,,4.0,4,0,1,3,14,0.3333333333333333,14.0,1.0,4,4.5,0.0,1.5,3,63.0
pipe_7677,deep_pipeline,"module pipe_7677(in0, in1, clk, reset, out);
  input clk, reset;
  input in0, in1;
  output out;
  wire stage0;
  nand g0(stage0, in0, in1);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  and g1(stage1, stage1_ff, in1);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  or g2(stage2, stage2_ff, in0);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  nand g3(stage3, stage3_ff, in0);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  or g4(stage4, stage4_ff, in0);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  and g5(stage5, stage5_ff, in0);
  assign out = stage5;
endmodule
",deep_pipeline,2,,6,6,6.0,,,6,6,4,2,7,2.0,1.1666666666666667,6.0,6,9.0,0.8571428571428571,4.5,8,10.5
pipe_2981,deep_pipeline,"module pipe_2981(in0, in1, clk, reset, out);
  input clk, reset;
  input in0, in1;
  output out;
  wire stage0;
  xor g0(stage0, in0, in0);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  xor g1(stage1, stage1_ff, in1);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  xor g2(stage2, stage2_ff, in1);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  nand g3(stage3, stage3_ff, in0);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  and g4(stage4, stage4_ff, in1);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  xor g5(stage5, stage5_ff, in0);
  reg stage6_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage6_ff <= 0;
    else stage6_ff <= stage5_ff;
  end
  wire stage6;
  xor g6(stage6, stage6_ff, in0);
  assign out = stage6;
endmodule
",deep_pipeline,2,,7,7,7.0,,,7,7,3,2,0,1.5,0.0,7.0,7,10.5,,5.25,6,0.0
pipe_9551,deep_pipeline,"module pipe_9551(in0, in1, in2, clk, reset, out);
  input clk, reset;
  input in0, in1, in2;
  output out;
  wire stage0;
  or g0(stage0, in1, in1);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  nand g1(stage1, stage1_ff, in2);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  nor g2(stage2, stage2_ff, in1);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  nor g3(stage3, stage3_ff, in0);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  xor g4(stage4, stage4_ff, in0);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  and g5(stage5, stage5_ff, in1);
  assign out = stage5;
endmodule
",deep_pipeline,3,,6,6,6.0,,,6,6,1,2,6,0.5,1.0,6.0,6,9.0,1.0,4.5,2,9.0
multiclk_9789,multi_clock,"module multiclk_9789(in0, in1, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1;
  output out;
  wire comb1;
  xor g0(comb1, in0, in1);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,2,,2,1,,2.0,,1,2,2,3,3,0.6666666666666666,1.5,1.0,1,1.5,0.6666666666666666,0.5,6,2.25
multiclk_3255,multi_clock,"module multiclk_3255(in0, in1, in2, in3, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2, in3;
  output out;
  wire comb1;
  and g0(comb1, in2, in3);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,4,,2,1,,2.0,,1,2,1,2,3,0.5,1.5,1.0,1,1.5,0.6666666666666666,0.75,2,2.25
multiclk_1143,multi_clock,"module multiclk_1143(in0, in1, in2, clk1, clk2, reset, out);
  input clk1, clk2, reset;
  input in0, in1, in2;
  output out;
  wire comb1;
  xor g0(comb1, in2, in0);
  reg reg1;
  always @(posedge clk1 or posedge reset) begin
    if (reset) reg1 <= 0;
    else reg1 <= comb1;
  end
  reg cross_domain;
  always @(posedge clk2 or posedge reset) begin
    if (reset) cross_domain <= 0;
    else cross_domain <= reg1;
  end
  assign out = cross_domain;
endmodule
",multi_clock,3,,2,1,,2.0,,1,2,2,1,3,2.0,1.5,1.0,1,1.5,0.6666666666666666,1.5,2,2.25
fanin_8620,high_fanin,"module fanin_8620(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_0_4);
  assign out = w_3_0;
endmodule
",high_fanin,10,,0,4,,,4.0,4,0,3,3,9,1.0,9.0,1.0,4,4.5,0.0,1.5,9,40.5
fanin_7759,high_fanin,"module fanin_7759(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_1_2;
  or g_1_2(w_1_2, w_0_4, in10);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_1_2);
  assign out = w_3_0;
endmodule
",high_fanin,11,,0,4,,,4.0,4,0,4,1,10,4.0,10.0,1.0,4,4.5,0.0,4.5,4,45.0
pipe_7977,deep_pipeline,"module pipe_7977(in0, in1, clk, reset, out);
  input clk, reset;
  input in0, in1;
  output out;
  wire stage0;
  nor g0(stage0, in0, in1);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  xor g1(stage1, stage1_ff, in1);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  or g2(stage2, stage2_ff, in0);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  or g3(stage3, stage3_ff, in1);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  or g4(stage4, stage4_ff, in0);
  reg stage5_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage5_ff <= 0;
    else stage5_ff <= stage4_ff;
  end
  wire stage5;
  nand g5(stage5, stage5_ff, in1);
  reg stage6_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage6_ff <= 0;
    else stage6_ff <= stage5_ff;
  end
  wire stage6;
  nor g6(stage6, stage6_ff, in1);
  assign out = stage6;
endmodule
",deep_pipeline,2,,7,7,7.0,,,7,7,4,1,8,4.0,1.1428571428571428,7.0,7,10.5,0.875,10.5,4,12.0
pipe_8547,deep_pipeline,"module pipe_8547(in0, in1, in2, clk, reset, out);
  input clk, reset;
  input in0, in1, in2;
  output out;
  wire stage0;
  nand g0(stage0, in1, in1);
  reg stage1_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage1_ff <= 0;
    else stage1_ff <= stage0;
  end
  wire stage1;
  nand g1(stage1, stage1_ff, in2);
  reg stage2_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage2_ff <= 0;
    else stage2_ff <= stage1_ff;
  end
  wire stage2;
  or g2(stage2, stage2_ff, in1);
  reg stage3_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage3_ff <= 0;
    else stage3_ff <= stage2_ff;
  end
  wire stage3;
  nand g3(stage3, stage3_ff, in1);
  reg stage4_ff;
  always @(posedge clk or posedge reset) begin
    if (reset) stage4_ff <= 0;
    else stage4_ff <= stage3_ff;
  end
  wire stage4;
  or g4(stage4, stage4_ff, in2);
  assign out = stage4;
endmodule
",deep_pipeline,3,,5,5,5.0,,,5,5,1,3,6,0.3333333333333333,1.2,5.0,5,7.5,0.8333333333333334,2.5,3,9.0
comb_9120,simple_comb,"module comb_9120(in0, in1, in2, in3, out);
  input in0, in1, in2, in3;
  output out;
  wire w0;
  wire w1;
  wire w2;
  wire w3;
  xor g0(w0, in0, in0);
  nand g1(w1, w0, in2);
  or g2(w2, w1, in0);
  xor g3(w3, w2, in2);
  assign out = w3;
endmodule
",simple_comb,4,4.0,0,4,,,,4,0,3,1,1,3.0,1.0,1.0,4,4.5,0.0,4.5,3,4.5
fanin_1414,high_fanin,"module fanin_1414(in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15, out);
  input in0, in1, in2, in3, in4, in5, in6, in7, in8, in9, in10, in11, in12, in13, in14, in15;
  output out;
  wire w_0_0;
  or g_0_0(w_0_0, in0, in1);
  wire w_0_1;
  or g_0_1(w_0_1, in2, in3);
  wire w_0_2;
  or g_0_2(w_0_2, in4, in5);
  wire w_0_3;
  or g_0_3(w_0_3, in6, in7);
  wire w_0_4;
  or g_0_4(w_0_4, in8, in9);
  wire w_0_5;
  or g_0_5(w_0_5, in10, in11);
  wire w_0_6;
  or g_0_6(w_0_6, in12, in13);
  wire w_0_7;
  or g_0_7(w_0_7, in14, in15);
  wire w_1_0;
  or g_1_0(w_1_0, w_0_0, w_0_1);
  wire w_1_1;
  or g_1_1(w_1_1, w_0_2, w_0_3);
  wire w_1_2;
  or g_1_2(w_1_2, w_0_4, w_0_5);
  wire w_1_3;
  or g_1_3(w_1_3, w_0_6, w_0_7);
  wire w_2_0;
  or g_2_0(w_2_0, w_1_0, w_1_1);
  wire w_2_1;
  or g_2_1(w_2_1, w_1_2, w_1_3);
  wire w_3_0;
  or g_3_0(w_3_0, w_2_0, w_2_1);
  assign out = w_3_0;
endmodule
",high_fanin,16,,0,4,,,4.0,4,0,4,3,15,1.3333333333333333,15.0,1.0,4,4.5,0.0,1.5,12,67.5
